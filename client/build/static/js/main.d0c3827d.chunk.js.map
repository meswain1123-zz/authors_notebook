{"version":3,"sources":["logo.svg","redux/actions/index.js","redux/constants/actionTypes.js","api.js","views/Home.js","views/Template.js","components/Navigation/routes.js","components/Navigation/MobileMenu.js","components/Navigation/Navbar.js","components/Navigation/Sidebar.js","views/Forum/ForumMenu.js","views/User/Login.js","views/User/Edit.js","views/World/Index.js","views/World/Details.js","views/World/Edit.js","views/Type/Details.js","views/Type/AttributeControl.js","views/Type/AttributesControl.js","views/Type/Edit.js","views/Thing/Details.js","views/Thing/AttributeControl.js","views/Thing/AttributesControl.js","views/Thing/Edit.js","views/MainPage.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","selectPage","payload","type","setWorlds","setPublicWorlds","selectWorld","setTypes","addType","setThings","addThing","updateType","updateSelectedType","updateThing","updateSelectedThing","UnauthorizedError","message","this","name","prototype","Error","API","instance","getInstance","APIClass","logErrorReason","reason","console","log","Promise","reject","checkStatus","response","status","unauthorizedError","statusText","error","getVersion","a","real","fetchData","processResponse","version","login","user","postData","_id","email","firstName","lastName","logout","register","sendReset","getWorldsForUser","OwnerID","Name","Public","getPublicWorlds","createWorld","world","deleteWorld","worldID","deleteData","updateWorld","patchData","getTypesForWorld","WorldID","getType","typeID","Description","Attributes","createType","deleteType","getThingsForWorld","getThing","thingID","Types","createThing","thing","deleteThing","path","options","fetch","mode","credentials","headers","Accept","then","catch","data","method","body","JSON","stringify","putData","json","Page","props","state","Component","HomePage","connect","className","TemplatePage","selectedPage","app","dispatch","page","menuRoutes","icon","Home","component","Forum","Menu","api","res","worlds","undefined","map","prop","key","ListItem","Button","fullWidth","variant","color","href","Icon","ListItemText","primary","worldLinks","publicWorlds","display","List","links","myWorlds","MobileMenu","Bar","menuClick","toggleMenu","loadFromStorage","AppBar","position","Toolbar","Grid","container","spacing","item","xs","IconButton","style","aria-label","onClick","selectedWorld","to","activeClassName","mobileMenuOpen","Box","sm","NavBar","menuOpen","setTimeout","button","src","logo","alt","logoText","brand","Divider","light","Sidebar","window","location","pathname","ForumMenuPage","componentDidMount","validateField","setState","remember","handleUserInput","e","target","value","checked","inputBlur","validation","fieldValidation","valid","handleClickShowPassword","showPassword","handleMouseDownPassword","event","preventDefault","fieldName","match","length","password","validateForm","respond","emailValid","confirmEmailValid","passwordValid","confirmPasswordValid","firstNameValid","lastNameValid","formMode","formValid","confirmEmail","confirmPassword","onSubmit","waiting","submitThroughAPI","errors","loginError","show","cookies","Cookies","set","userLogin","redirectTo","err","loginClick","registerClick","passwordClick","emailCookie","get","passCookie","FormControl","InputLabel","htmlFor","OutlinedInput","id","onChange","onBlur","labelWidth","FormHelperText","endAdornment","InputAdornment","onMouseDown","edge","FormControlLabel","control","Checkbox","label","Link","disabled","Object","keys","i","LoginPage","UserEditPage","Index","handleChange_old","panel","isExpanded","expandedPanel","handleChange","things","filter","TypeIDs","includes","width","majorLess","t","Major","majorless","ExpansionPanel","expanded","ExpansionPanelSummary","expandIcon","types","ExpansionPanelDetails","direction","Tooltip","title","_","Owner","maxWidth","j","ThingIndex","delete","selectedWorldID","modalOpen","getModalStyle","top","Math","round","innerHeight","left","innerWidth","transform","params","getTypes","forEach","Supers","SuperIDs","sID","concat","t2","getThings","tID","Fab","size","Modal","aria-labelledby","aria-describedby","open","onClose","WorldDetailsPage","w","nameValid","addWorld","autoComplete","marginLeft","WorldEditPage","AttributesArr","supers","references","ReferenceIDs","selectedType","attribute","Type","Options","option","Type2","ListType","superType","subTypes","sub","instances","TypeDetails","handleType2Change","attr","onNewType","newType","handleOptionsChange","AttributeControl","useState","changeName","attributeTypes","FromSupers","index","AttributeTypes","Select","labelId","handleTypeChange","MenuItem","defaultValue","chips","handleListTypeChange","onDelete","Label","styled","Control","newAttribute","push","changeAttribute","blurAttribute","deleteAttribute","attributesArr","addNewType","modalSubmit","saveNewType","AttributesControl","updateAttributesArr","arr","attr2","attrArrValid","superIDs","s","supersChange","addSuper","selectedList","selectedItem","s2","attributes","matches","superID","removeSuper","removedItem","removeUs","checkMe","splice","placeholder","selectedValues","onSelect","onRemove","displayValue","TypeEditPage","selectedThing","Value","ListValues","listValue","ThingDetails","changeValue","listOptions","listOptionValues","o","type2","FromTypes","onNewThing","newThing","handleTextListChange","addOption","removeOption","removeType","optionsChange","addNewThing","newThingType","saveNewThing","typeIDs","createThingFromType","v","typesChange","substring","Things","typeStr","renderHeader","ThingEditPage","exact","TypeDetailsPage","ThingDetailsPage","MainPage","AppLayout","updateDimensions","addEventListener","bind","removeEventListener","marginRight","marginTop","App","Boolean","hostname","initialState","articles","loadIt","rootReducer","reducers","action","parse","sessionStorage","getItem","assign","setItem","removeItem","worldArr","wasPublic","publicWorld","changedType","changedAt","Date","now","changedThing","session","sessionReducer","reducer","combineReducers","store","createStore","refreshFromLocalStorage","refreshOnCheckAuth","redirectPath","driver","validateSession","sessionService","initSessionService","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0c3827d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {\r\n  SELECT_PAGE,\r\n  ADD_ARTICLE,\r\n  LOGIN,\r\n  LOG_OUT,\r\n  SET_WORLDS,\r\n  SET_PUBLIC_WORLDS,\r\n  ADD_WORLD,\r\n  UPDATE_WORLD,\r\n  SELECT_WORLD,\r\n  SET_TYPES,\r\n  ADD_TYPE,\r\n  SET_THINGS,\r\n  ADD_THING,\r\n  UPDATE_TYPE,\r\n  UPDATE_ATTRIBUTES_ARR,\r\n  UPDATE_SELECTED_TYPE,\r\n  UPDATE_THING,\r\n  UPDATE_SELECTED_THING,\r\n  LOAD_FROM_STORAGE,\r\n  TOGGLE_MENU\r\n} from \"../constants/actionTypes\";\r\n\r\nexport function selectPage(payload) {\r\n  return { type: SELECT_PAGE, payload };\r\n}\r\nexport function addArticle(payload) {\r\n  return { type: ADD_ARTICLE, payload };\r\n}\r\nexport function userLogin(payload) {\r\n  return { type: LOGIN, payload };\r\n}\r\nexport function logOut(payload) {\r\n  return { type: LOG_OUT, payload };\r\n}\r\nexport function setWorlds(payload) {\r\n  return { type: SET_WORLDS, payload };\r\n}\r\nexport function addWorld(payload) {\r\n  return { type: ADD_WORLD, payload };\r\n}\r\nexport function updateWorld(payload) {\r\n  return { type: UPDATE_WORLD, payload };\r\n}\r\nexport function setPublicWorlds(payload) {\r\n  return { type: SET_PUBLIC_WORLDS, payload };\r\n}\r\nexport function selectWorld(payload) {\r\n  return { type: SELECT_WORLD, payload };\r\n}\r\nexport function setTypes(payload) {\r\n  return { type: SET_TYPES, payload };\r\n}\r\nexport function addType(payload) {\r\n  return { type: ADD_TYPE, payload };\r\n}\r\nexport function setThings(payload) {\r\n  return { type: SET_THINGS, payload };\r\n}\r\nexport function addThing(payload) {\r\n  return { type: ADD_THING, payload };\r\n}\r\nexport function updateType(payload) {\r\n  return { type: UPDATE_TYPE, payload };\r\n}\r\nexport function updateAttributesArr(payload) {\r\n  return { type: UPDATE_ATTRIBUTES_ARR, payload };\r\n}\r\nexport function updateSelectedType(payload) {\r\n  return { type: UPDATE_SELECTED_TYPE, payload };\r\n}\r\nexport function updateThing(payload) {\r\n  return { type: UPDATE_THING, payload };\r\n}\r\nexport function updateSelectedThing(payload) {\r\n  return { type: UPDATE_SELECTED_THING, payload };\r\n}\r\nexport function loadFromStorage(payload) {\r\n  return { type: LOAD_FROM_STORAGE, payload };\r\n}\r\nexport function toggleMenu(payload) {\r\n  return { type: TOGGLE_MENU, payload };\r\n}\r\n","\r\nexport const SELECT_PAGE = \"SELECT_PAGE\";\r\nexport const ADD_ARTICLE = \"ADD_ARTICLE\";\r\nexport const LOGIN = \"LOGIN\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\nexport const SET_WORLDS = \"SET_WORLDS\";\r\nexport const SET_PUBLIC_WORLDS = \"SET_PUBLIC_WORLDS\";\r\nexport const ADD_WORLD = \"ADD_WORLD\";\r\nexport const UPDATE_WORLD = \"UPDATE_WORLD\";\r\nexport const SELECT_WORLD = \"SELECT_WORLD\";\r\nexport const SET_TYPES = \"SET_TYPES\";\r\nexport const ADD_TYPE = \"ADD_TYPE\";\r\nexport const SET_THINGS = \"SET_THINGS\";\r\nexport const ADD_THING = \"ADD_THING\";\r\nexport const UPDATE_TYPE = \"UPDATE_TYPE\";\r\nexport const UPDATE_ATTRIBUTES_ARR = \"UPDATE_ATTRIBUTES_ARR\";\r\nexport const UPDATE_SELECTED_TYPE = \"UPDATE_SELECTED_TYPE\";\r\nexport const UPDATE_THING = \"UPDATE_THING\";\r\nexport const UPDATE_SELECTED_THING = \"UPDATE_SELECTED_THING\";\r\nexport const LOAD_FROM_STORAGE = \"LOAD_FROM_STORAGE\";\r\nexport const TOGGLE_MENU = \"TOGGLE_MENU\";\r\n","\r\n// This is our special type of Error that represents\r\n// when a request got a 401 Unauthorized response\r\nfunction UnauthorizedError(message) {\r\n  this.name = \"UnauthorizedError\";\r\n  this.message = message;\r\n}\r\nUnauthorizedError.prototype = new Error();\r\n\r\nvar API = (function() {\r\n  var instance;\r\n\r\n  function createInstance() {\r\n    var api = new APIClass();\r\n    return api;\r\n  }\r\n\r\n  return {\r\n    getInstance: function() {\r\n      if (!instance) {\r\n        instance = createInstance();\r\n      }\r\n      return instance;\r\n    }\r\n  };\r\n})();\r\n\r\nclass APIClass {\r\n  constructor() {\r\n    this.real = true;\r\n  }\r\n\r\n  logErrorReason = reason => {\r\n    // log the error reason but keep the rejection\r\n    console.log(\"Response error reason:\", reason);\r\n    return Promise.reject(reason);\r\n  };\r\n\r\n  checkStatus = response => {\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return response;\r\n    } else if (response.status === 401) {\r\n      var unauthorizedError = new UnauthorizedError(response.statusText);\r\n      unauthorizedError.response = response;\r\n      return Promise.reject(unauthorizedError);\r\n    } else {\r\n      var error = new Error(response.statusText);\r\n      error.response = response;\r\n      return Promise.reject(error);\r\n    }\r\n  };\r\n\r\n  getVersion = async () => {\r\n    if (this.real) {\r\n      const response = await this.fetchData(\"/version\");\r\n      return this.processResponse(response);\r\n    } else {\r\n      return { version: \"0.0.1\" };\r\n    }\r\n  };\r\n\r\n  // User\r\n  login = async user => {\r\n    if (this.real) {\r\n      const response = await this.postData(\"/api/user/login\", user);\r\n      return this.processResponse(response);\r\n    } else {\r\n      return {\r\n        _id: \"-1\",\r\n        email: \"fake@fakemail.com\",\r\n        firstName: \"Liar Liar\",\r\n        lastName: \"Pants on Fire\"\r\n      };\r\n    }\r\n  };\r\n\r\n  logout = async user => {\r\n    if (this.real) {\r\n      await this.postData(\"/api/user/logout\");\r\n    }\r\n  };\r\n\r\n  register = async user => {\r\n    if (this.real) {\r\n      const response = await this.postData(\"/api/user/register\", user);\r\n      return this.processResponse(response);\r\n    } else {\r\n      return -1;\r\n    }\r\n  };\r\n\r\n  sendReset = async user => {\r\n    if (this.real) {\r\n      const response = await this.postData(\"/api/user/sendReset\", user);\r\n      return this.processResponse(response);\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  };\r\n\r\n  // World\r\n  getWorldsForUser = async () => {\r\n    if (this.real) {\r\n      const response = await this.fetchData(`/api/world/getWorldsForUser`);\r\n      return this.processResponse(response);\r\n    } else {\r\n      return [\r\n        { _id: -1, OwnerID: -1, Name: \"Alice in Wonderland\", Public: true }\r\n      ];\r\n    }\r\n  };\r\n\r\n  getPublicWorlds = async () => {\r\n    if (this.real) {\r\n      const response = await this.fetchData(\"/api/world/getPublicWorlds\");\r\n      return this.processResponse(response);\r\n    } else {\r\n      return [\r\n        { _id: -1, OwnerID: -1, Name: \"Alice in Wonderland\", Public: true }\r\n      ];\r\n    }\r\n  };\r\n\r\n  createWorld = async (world) => {\r\n    if (this.real) {\r\n      const response = await this.postData(\"/api/world/createWorld\", { world: world });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return -1;\r\n    }\r\n  };\r\n\r\n  deleteWorld = async (worldID) => {\r\n    if (this.real) {\r\n      const response = await this.deleteData(\"/api/world/deleteWorld\", { worldID: worldID });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  };\r\n\r\n  updateWorld = async (world) => {\r\n    if (this.real) {\r\n      const response = await this.patchData(\"/api/world/updateWorld\", { world: world });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  };\r\n\r\n  selectWorld = async (worldID) => {\r\n    if (this.real) {\r\n      const response = await this.postData(\"/api/world/selectWorld\", { worldID: worldID });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  };\r\n\r\n  // Type\r\n  getTypesForWorld = async () => {\r\n    if (this.real) {\r\n      const response = await this.fetchData(\r\n        `/api/world/getTypesForWorld`\r\n      );\r\n      return this.processResponse(response);\r\n    } else {\r\n      return [{ _id: -1, WorldID: -1, Name: \"Character\" }];\r\n    }\r\n  };\r\n\r\n  getType = async (typeID) => {\r\n    if (this.real) {\r\n      const response = await this.fetchData(\r\n        `/api/world/getType/${typeID}`\r\n      );\r\n      return this.processResponse(response);\r\n    } else {\r\n      return {\r\n        _id: -1,\r\n        WorldID: -1,\r\n        Name: \"Character\",\r\n        Description: \"\",\r\n        Attributes: {}\r\n      };\r\n    }\r\n  };\r\n\r\n  createType = async (type) => {\r\n    if (this.real) {\r\n      const response = await this.postData(\"/api/world/createType\", { type: type });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return -1;\r\n    }\r\n  };\r\n\r\n  deleteType = async (typeID) => {\r\n    if (this.real) {\r\n      const response = await this.deleteData(\"/api/world/deleteType\", { typeID: typeID });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  };\r\n\r\n  updateType = async (type) => {\r\n    if (this.real) {\r\n      const response = await this.patchData(\"/api/world/updateType\", { type: type });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  };\r\n\r\n  // Thing\r\n  getThingsForWorld = async () => {\r\n    if (this.real) {\r\n      const response = await this.fetchData(\r\n        `/api/world/getThingsForWorld`\r\n      );\r\n      return this.processResponse(response);\r\n    } else {\r\n      return [{ _id: -1, WorldID: -1, Name: \"Alice\" }];\r\n    }\r\n  };\r\n\r\n  getThing = async (thingID) => {\r\n    if (this.real) {\r\n      const response = await this.fetchData(`/api/world/getThing/${thingID}`);\r\n      return this.processResponse(response);\r\n    } else {\r\n      return {\r\n        _id: -1,\r\n        WorldID: -1,\r\n        Types: [-1],\r\n        Name: \"Alice\",\r\n        Description: \"\"\r\n      };\r\n    }\r\n  };\r\n\r\n  createThing = async (thing) => {\r\n    if (this.real) {\r\n      const response = await this.postData(\"/api/world/createThing\", { thing: thing });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return -1;\r\n    }\r\n  };\r\n\r\n  deleteThing = async (thingID) => {\r\n    if (this.real) {\r\n      const response = await this.deleteData(\"/api/world/deleteThing\", { thingID: thingID });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  };\r\n\r\n  updateThing = async (thing) => {\r\n    if (this.real) {\r\n      const response = await this.patchData(\"/api/world/updateThing\", { thing: thing });\r\n      return this.processResponse(response);\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  };\r\n\r\n  fetchData = async (path, options = {}) => {\r\n    return await fetch(`${path}`, {\r\n      mode: \"cors\",\r\n      credentials: \"include\",\r\n      ...options,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        ...options.headers\r\n      }\r\n    })\r\n      .then(this.checkStatus)\r\n      .catch(this.logErrorReason);\r\n  };\r\n\r\n  postData = async (path, data, options = {}) => {\r\n    return await fetch(`${path}`, {\r\n      mode: \"cors\",\r\n      credentials: \"include\",\r\n      ...options,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ...options.headers\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(this.checkStatus)\r\n      .catch(this.logErrorReason);\r\n  };\r\n\r\n  putData = async (path, data, options = {}) => {\r\n    return await fetch(`${path}`, {\r\n      mode: \"cors\",\r\n      credentials: \"include\",\r\n      ...options,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ...options.headers\r\n      },\r\n      method: \"PUT\",\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(this.checkStatus)\r\n      .catch(this.logErrorReason);\r\n  };\r\n\r\n  patchData = async (path, data, options = {}) => {\r\n    return await fetch(`${path}`, {\r\n      mode: \"cors\",\r\n      credentials: \"include\",\r\n      ...options,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ...options.headers\r\n      },\r\n      method: \"PATCH\",\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(this.checkStatus)\r\n      .catch(this.logErrorReason);\r\n  };\r\n\r\n  deleteData = async (path, data, options = {}) => {\r\n    return await fetch(`${path}`, {\r\n      mode: \"cors\",\r\n      credentials: \"include\",\r\n      ...options,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ...options.headers\r\n      },\r\n      method: \"DELETE\",\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(this.checkStatus)\r\n      .catch(this.logErrorReason);\r\n  };\r\n\r\n  processResponse = async response => {\r\n    const body = await response.json();\r\n    if (response.status !== 200) throw Error(body.message);\r\n    else return body;\r\n  };\r\n}\r\n\r\nexport default API;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      version: \"0\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div>Home</div>\r\n    );\r\n  }\r\n}\r\n\r\nconst HomePage = connect()(Page);\r\nexport default HomePage;\r\n","\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectPage } from \"../redux/actions/index\";\r\n\r\n// This is a template to use when creating pages.\r\n// It's recommended not to make your own base component classes,\r\n// but I have just a couple things I want to add to my 'page'\r\n// components.  I'll copy this template whenever creating a\r\n// new 'page' component.\r\n\r\nconst mapStateToProps = state => {\r\n  return { selectedPage: state.app.selectedPage };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  componentDidMount() {\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"col-sm-12\">\r\n        Template Page\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst TemplatePage = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default TemplatePage;\r\n","\r\nimport Home from \"@material-ui/icons/Home\";\r\nimport Forum from \"@material-ui/icons/Forum\";\r\nimport HomePage from \"../../views/Home\";\r\nimport TemplatePage from \"../../views/Template\";\r\n\r\n\r\nconst menuRoutes = [\r\n  {\r\n    path: \"/\",\r\n    name: \"Home\",\r\n    icon: Home,\r\n    component: HomePage,\r\n  },\r\n  {\r\n    path: \"/Forums\",\r\n    name: \"Forums\",\r\n    icon: Forum,\r\n    component: TemplatePage,\r\n  }\r\n];\r\n\r\nexport default menuRoutes;\r\n","import React, { Component } from \"react\";\r\nimport \"../../App.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport { connect } from \"react-redux\";\r\nimport menuRoutes from \"./routes\";\r\nimport { \r\n  selectPage, setWorlds, setPublicWorlds \r\n} from \"../../redux/actions/index\";\r\nimport API from \"../../api\";\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return { \r\n    selectedPage: state.app.selectedPage,\r\n    worlds: state.app.worlds,\r\n    publicWorlds: state.app.publicWorlds,\r\n    user: state.app.user\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page)),\r\n    setWorlds: worlds => dispatch(setWorlds(worlds)),\r\n    setPublicWorlds: worlds => dispatch(setPublicWorlds(worlds))\r\n  };\r\n}\r\nclass Menu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.api.getPublicWorlds().then(res => {\r\n      this.props.setPublicWorlds(res.worlds);\r\n    });\r\n    if (this.props.user !== null) {\r\n      this.api.getWorldsForUser().then(res => {\r\n        if (res.worlds !== undefined)\r\n          this.props.setWorlds(res.worlds);\r\n      });\r\n    }\r\n  }\r\n\r\n  links() {\r\n    return (\r\n      <div>\r\n        {menuRoutes.map((prop, key) => {\r\n          return (\r\n            <ListItem key={key}>\r\n              <Button \r\n                fullWidth variant=\"contained\" color=\"primary\" \r\n                href={`/world/details/${prop._id}`}>\r\n                {typeof prop.icon === \"string\" ? (\r\n                  <Icon className=\"marginLeft\">{prop.icon}</Icon>\r\n                ) : (\r\n                  <prop.icon className=\"marginLeft\" />\r\n                )}\r\n                &nbsp;<ListItemText primary={prop.name} className=\"marginLeft\" />\r\n              </Button>\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  publicWorlds() {\r\n    const worldLinks = (this.props.publicWorlds === undefined || this.props.publicWorlds === null || this.props.publicWorlds.message !== undefined ? \"\" : this.props.publicWorlds.map((prop, key) => {\r\n      return (\r\n        <ListItem key={key}>\r\n          <Button \r\n            fullWidth variant=\"contained\" color=\"primary\" \r\n            href={`/world/details/${prop._id}`}>\r\n            <ListItemText primary={prop.Name} />\r\n          </Button>\r\n        </ListItem>\r\n      );\r\n    }));\r\n    return (\r\n      <div>\r\n        <ListItem>\r\n          <ListItemText display=\"none\" primary={\"Public Worlds\"} />\r\n        </ListItem>\r\n        {worldLinks}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  myWorlds() {\r\n    if (this.props.user === null || this.props.user === undefined) {\r\n      return \"\";\r\n    }\r\n    else {\r\n      const worldLinks = (this.props.worlds === undefined ? \"\" : this.props.worlds.map((prop, key) => {\r\n        return (\r\n          <ListItem key={key}>\r\n            <Button \r\n              fullWidth variant=\"contained\" color=\"primary\" \r\n              href={`/world/details/${prop._id}`}>\r\n              <ListItemText primary={prop.Name} />\r\n            </Button>\r\n          </ListItem>\r\n        );\r\n      }));\r\n      return (\r\n        <div>\r\n          <ListItem>\r\n            <ListItemText primary={\"My Worlds\"} />\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button \r\n              fullWidth variant=\"contained\" color=\"primary\" \r\n              href={`/world/create`}>\r\n              <Add/><ListItemText primary={\"Create New\"} />\r\n            </Button>\r\n          </ListItem>\r\n          {worldLinks}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <List>\r\n        {this.links()}\r\n        {this.publicWorlds()}\r\n        {this.myWorlds()}\r\n      </List>\r\n    );\r\n  }\r\n}\r\n\r\nconst MobileMenu = connect(mapStateToProps, mapDispatchToProps)(Menu);\r\nexport default MobileMenu;\r\n","import React, { Component } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectPage,\r\n  setWorlds,\r\n  // setPublicWorlds,\r\n  loadFromStorage,\r\n  toggleMenu\r\n} from \"../../redux/actions/index\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport API from \"../../api\";\r\nimport MobileMenu from \"./MobileMenu\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedPage: state.app.selectedPage,\r\n    user: state.app.user,\r\n    selectedWorld: state.app.selectedWorld,\r\n    mobileMenuOpen: !state.app.menuOpen // This defaults to closed instead of open\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page)),\r\n    setWorlds: worlds => dispatch(setWorlds(worlds)),\r\n    // setPublicWorlds: worlds => dispatch(setPublicWorlds(worlds)),\r\n    loadFromStorage: () => dispatch(loadFromStorage({})),\r\n    toggleMenu: () => dispatch(toggleMenu({}))\r\n  };\r\n}\r\nclass Bar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.loadFromStorage();\r\n  }\r\n\r\n  menuClick = () => {\r\n    this.props.toggleMenu();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Grid container spacing={0}>\r\n            <Grid item xs>\r\n              <IconButton\r\n                style={{ color: \"white\" }}\r\n                aria-label=\"Menu\"\r\n                onClick={this.menuClick}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <ListItem className=\"curvedButton\">\r\n                <ListItemText\r\n                  primary={\r\n                    this.props.selectedWorld === null\r\n                      ? \"Welcome!\"\r\n                      : this.props.selectedWorld.Name\r\n                  }\r\n                />\r\n              </ListItem>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <NavLink\r\n                className=\"float-right blue whiteFont\"\r\n                to=\"/User/Login\"\r\n                activeClassName=\"active\"\r\n              >\r\n                <ListItem className=\"curvedButton float-right\">\r\n                  <Icon>person</Icon>\r\n                  <ListItemText\r\n                    primary={\r\n                      this.props.user === null ||\r\n                      this.props.user.firstName === undefined\r\n                        ? \" Login/Register\"\r\n                        : ` ${this.props.user.firstName} ${this.props.user.lastName}`\r\n                    }\r\n                  />\r\n                </ListItem>\r\n              </NavLink>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n        {this.props.mobileMenuOpen ? \r\n          <Box display={{ xs: 'inline', sm: 'none' }}>\r\n            <MobileMenu />\r\n          </Box>\r\n        : \"\" }\r\n      </AppBar>\r\n    );\r\n  }\r\n}\r\n\r\nconst NavBar = connect(mapStateToProps, mapDispatchToProps)(Bar);\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"../../App.css\";\r\nimport logo from \"../../logo.svg\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport menuRoutes from \"./routes\";\r\nimport { \r\n  selectPage, setWorlds, setPublicWorlds \r\n} from \"../../redux/actions/index\";\r\nimport API from \"../../api\";\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return { \r\n    selectedPage: state.app.selectedPage,\r\n    worlds: state.app.worlds,\r\n    publicWorlds: state.app.publicWorlds,\r\n    user: state.app.user\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page)),\r\n    setWorlds: worlds => dispatch(setWorlds(worlds)),\r\n    setPublicWorlds: worlds => dispatch(setPublicWorlds(worlds))\r\n  };\r\n}\r\nclass Bar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.api.getPublicWorlds().then(res => {\r\n      console.log(res);\r\n      this.props.setPublicWorlds(res.worlds);\r\n    });\r\n    // These kinds of things can also be done in render, \r\n    // but I prefer to put it here because it's only run once.\r\n    // The downside is that it's run before props gets populated\r\n    // so, it needs to be put into setTimeout to give the props\r\n    // a chance to get populated.\r\n    setTimeout(() => {\r\n      if (this.props.user !== null) {\r\n        this.api.getWorldsForUser().then(res => {\r\n          if (res.worlds !== undefined)\r\n            this.props.setWorlds(res.worlds);\r\n        });\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  links() {\r\n    return (\r\n      <div>\r\n        {menuRoutes.map((prop, key) => {\r\n          return (\r\n            <ListItem key={key}>\r\n              <Button \r\n                fullWidth variant=\"contained\" color=\"primary\" \r\n                href={prop.path}>\r\n                {typeof prop.icon === \"string\" ? (\r\n                  <Icon className=\"marginLeft\">{prop.icon}</Icon>\r\n                ) : (\r\n                  <prop.icon className=\"marginLeft\" />\r\n                )}\r\n                &nbsp;<ListItemText primary={prop.name} className=\"marginLeft\" />\r\n              </Button>\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  brand() {\r\n    return (\r\n      <NavLink\r\n        to={`/`} className=\"blue blackFont\"\r\n        activeClassName=\"active\"\r\n      >\r\n        <ListItem button className=\"curvedButton\">\r\n          <img src={logo} alt=\"logo\" className=\"App-logo\" />\r\n          <ListItemText primary={this.props.logoText} />\r\n        </ListItem>\r\n      </NavLink>\r\n    );\r\n  }\r\n\r\n  publicWorlds() {\r\n    const worldLinks = (this.props.publicWorlds === undefined || this.props.publicWorlds === null || this.props.publicWorlds.message !== undefined ? \"\" : this.props.publicWorlds.map((prop, key) => {\r\n      return (\r\n        <ListItem key={key}>\r\n          <Button \r\n            fullWidth variant=\"contained\" color=\"primary\" \r\n            href={`/world/details/${prop._id}`}>\r\n            <ListItemText primary={prop.Name} />\r\n          </Button>\r\n        </ListItem>\r\n      );\r\n    }));\r\n    return (\r\n      <div>\r\n        <ListItem>\r\n          <ListItemText display=\"none\" primary={\"Public Worlds\"} />\r\n        </ListItem>\r\n        {worldLinks}\r\n      </div>\r\n      );\r\n  }\r\n\r\n  myWorlds() {\r\n    if (this.props.user === null || this.props.user === undefined) {\r\n      return \"\";\r\n    }\r\n    else {\r\n      const worldLinks = (this.props.worlds === undefined ? \"\" : this.props.worlds.map((prop, key) => {\r\n        return (\r\n          <ListItem key={key}>\r\n            <Button \r\n              fullWidth variant=\"contained\" color=\"primary\" \r\n              href={`/world/details/${prop._id}`}>\r\n              <ListItemText primary={prop.Name} />\r\n            </Button>\r\n          </ListItem>\r\n        );\r\n      }));\r\n      return (\r\n        <div>\r\n          <ListItem>\r\n            <ListItemText primary={\"My Worlds\"} />\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button \r\n              fullWidth variant=\"contained\" color=\"primary\" \r\n              href={`/world/create`}>\r\n              <Add/><ListItemText primary={\"Create New\"} />\r\n            </Button>\r\n          </ListItem>\r\n          {worldLinks}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // I normally like to put things like this in componentDidMount, \r\n    // but there it won't have access to anything in this.props.\r\n    // console.log(this.props.user);\r\n    // if (this.props.user !== null) {\r\n    //   this.api.getWorldsForUser().then(res => {\r\n    //     if (res.worlds !== undefined)\r\n    //       this.props.setWorlds(res.worlds);\r\n    //   });\r\n    // }\r\n    return (\r\n      <List className=\"Sidebar\">\r\n        {this.brand()}\r\n        <Divider light />\r\n        {this.links()}\r\n        {this.publicWorlds()}\r\n        {this.myWorlds()}\r\n      </List>\r\n    );\r\n  }\r\n}\r\n\r\nconst Sidebar = connect(mapStateToProps, mapDispatchToProps)(Bar);\r\nexport default Sidebar;\r\n","\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { selectPage } from \"../../redux/actions/index\";\r\n\r\nconst mapStateToProps = state => {\r\n  return { selectedPage: state.app.selectedPage };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  componentDidMount() {\r\n  }\r\n  render() {\r\n    if (\r\n      this.props.selectedPage === null ||\r\n      `/${this.props.selectedPage}` === window.location.pathname\r\n    ) {\r\n      return (\r\n        <div className=\"col-sm-12\">\r\n          Forum Menu Page!\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <Redirect\r\n          to={`/${this.props.selectedPage}`}\r\n        />\r\n      );\r\n    }\r\n  }\r\n}\r\nconst ForumMenuPage = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default ForumMenuPage;\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { userLogin, selectPage, setWorlds } from \"../../redux/actions/index\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Cookies from \"universal-cookie\";\r\nimport API from '../../api';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return { \r\n    selectedPage: state.app.selectedPage, \r\n    user: state.app.user, \r\n    loginError: state.app.loginError \r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page)),\r\n    userLogin: user => dispatch(userLogin(user)),\r\n    setWorlds: worlds => dispatch(setWorlds(worlds))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const cookies = new Cookies();\r\n    const emailCookie = cookies.get('email');\r\n    const passCookie = cookies.get('password');\r\n    this.state = {\r\n      formMode: \"login\",\r\n      email: (emailCookie === undefined ? \"\" : emailCookie),\r\n      password: (passCookie === undefined ? \"\" : passCookie),\r\n      confirmEmail: \"\",\r\n      confirmPassword: \"\",\r\n      fieldValidation: { \r\n        email: { valid: true, message: \"\" }, \r\n        password: { valid: true, message: \"\" }, \r\n        confirmEmail: { valid: true, message: \"\" }, \r\n        confirmPassword: { valid: true, message: \"\" },\r\n        firstName: { valid: true, message: \"\" },\r\n        lastName: { valid: true, message: \"\" }\r\n      },\r\n      formValid: false,\r\n      remember: false,\r\n      message: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      redirectTo: null\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.state.email) {\r\n      this.validateField(\"email\");\r\n      this.validateField(\"password\");\r\n      this.setState({remember: true});\r\n    }\r\n  }\r\n\r\n  handleUserInput = e => {\r\n    const name = e.target.name;\r\n    const value = (e.target.type === \"checkbox\" ? e.target.checked : e.target.value);\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  inputBlur = e => {\r\n    const name = e.target.name;\r\n    const validation = this.validateField(name);\r\n    const fieldValidation = this.state.fieldValidation;\r\n    if (fieldValidation[name].valid !== validation.valid) {\r\n      fieldValidation[name].valid = validation.valid;\r\n      fieldValidation[name].message = validation.message;\r\n      this.setState({ fieldValidation: fieldValidation });\r\n    }\r\n  }\r\n\r\n  handleClickShowPassword = () => {\r\n    this.setState({ showPassword: !this.state.showPassword });\r\n  };\r\n\r\n  handleMouseDownPassword = event => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  validateField = (fieldName) => {\r\n    let valid = true;\r\n    let message = \"\";\r\n    let value = this.state[fieldName];\r\n    switch (fieldName) {\r\n      case \"email\":\r\n        valid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i) !== null;\r\n        message = valid ? \"\" : \"Email is invalid\";\r\n        break;\r\n      case \"password\":\r\n        valid = value.length >= 6;\r\n        message = valid ? \"\" : \"Password is too short\";\r\n        break;\r\n      case \"confirmEmail\":\r\n        valid = value === this.state.email;\r\n        message = valid ? \"\" : \"Confirm Email doesn't match Email\";\r\n        break;\r\n      case \"confirmPassword\":\r\n        valid = value === this.state.password;\r\n        message = valid ? \"\" : \"Confirm Password doesn't match Password\";\r\n        break;\r\n      case \"firstName\":\r\n        valid = value.length >= 2;\r\n        message = valid ? \"\" : \"First Name is too short\";\r\n        break;\r\n      case \"lastName\":\r\n        valid = value.length >= 2;\r\n        message = valid ? \"\" : \"Last Name is too short\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const response = { valid: valid, message: message };\r\n    return response;\r\n  };\r\n\r\n  validateForm = (respond) => {\r\n    const emailValid = this.validateField(\"email\");\r\n    let confirmEmailValid = { valid: true, message: \"\" };\r\n    let passwordValid = { valid: true, message: \"\" };\r\n    let confirmPasswordValid = { valid: true, message: \"\" };\r\n    let firstNameValid = { valid: true, message: \"\" };\r\n    let lastNameValid = { valid: true, message: \"\" };\r\n    switch (this.state.formMode) {\r\n      case \"Login\":\r\n        passwordValid = this.validateField(\"password\");\r\n        break;\r\n      case \"Register\":\r\n        confirmEmailValid = this.validateField(\"confirmEmail\");\r\n        passwordValid = this.validateField(\"password\");\r\n        confirmPasswordValid = this.validateField(\"confirmPassword\");\r\n        firstNameValid = this.validateField(\"firstName\");\r\n        lastNameValid = this.validateField(\"lastName\");\r\n      break;\r\n      default:\r\n      break;\r\n    }\r\n    const formValid = \r\n      emailValid.valid && \r\n      passwordValid.valid && \r\n      confirmEmailValid.valid && \r\n      confirmPasswordValid.valid && \r\n      firstNameValid.valid &&\r\n      lastNameValid.valid;\r\n    const fieldValidation = this.state.fieldValidation;\r\n    fieldValidation.email = emailValid;\r\n    fieldValidation.password = passwordValid;\r\n    fieldValidation.confirmEmail = confirmEmailValid;\r\n    fieldValidation.confirmPassword = confirmPasswordValid;\r\n    fieldValidation.firstName = firstNameValid;\r\n    fieldValidation.lastName = lastNameValid;\r\n    this.setState({ \r\n      formValid: formValid,\r\n      fieldValidation: fieldValidation\r\n    }, respond);\r\n  }\r\n\r\n  onSubmit = () => {\r\n    function respond() {\r\n      if (this.state.formValid) {\r\n        this.setState({ waiting: true },\r\n          this.submitThroughAPI);\r\n      }\r\n    }\r\n\r\n    this.validateForm(respond);\r\n  };\r\n\r\n  submitThroughAPI = () => {\r\n    const user = {\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      firstName: this.state.firstName,\r\n      lastName: this.state.lastName\r\n    };\r\n    if (this.state.formMode === \"login\") {\r\n      this.api.login(user).then(res => {\r\n        if (res.user === null) {\r\n          let errors = this.state.fieldValidation;\r\n          errors.loginError = { message: res.message, valid: false, show: true };\r\n          this.setState({ fieldValidation: errors, waiting: false });\r\n        }\r\n        else {\r\n          if (this.state.remember) {\r\n            const cookies = new Cookies();\r\n            cookies.set('email', this.state.email);\r\n            cookies.set('password', this.state.password);\r\n          }\r\n          this.api.getWorldsForUser(res.user._id).then(res => {\r\n            this.props.setWorlds(res.worlds);\r\n          });\r\n          this.props.userLogin(res.user);\r\n          this.setState({ redirectTo: \"/\" });\r\n        }\r\n      })\r\n      .catch(err => console.log(err));\r\n    } else if (this.state.formMode === \"register\") {\r\n      this.api.register(user).then(res => {\r\n        this.setState({ message: res.message, formMode: \"login\", fieldValidation: { \r\n          email: { valid: false, message: \"\" }, \r\n          password: { valid: false, message: \"\" }, \r\n          confirmEmail: { valid: false, message: \"\" }, \r\n          confirmPassword: { valid: false, message: \"\" },\r\n          firstName: { valid: false, message: \"\" },\r\n          lastName: { valid: false, message: \"\" },\r\n          waiting: false\r\n        }});\r\n      })\r\n      .catch(err => console.log(err));\r\n    } else if (this.state.formMode === \"password\") {\r\n      this.api.sendReset(user).then(res => {\r\n        this.setState({ message: res.message, formMode: \"login\", fieldValidation: { \r\n          email: { valid: false, message: \"\" }, \r\n          password: { valid: false, message: \"\" }, \r\n          confirmEmail: { valid: false, message: \"\" }, \r\n          confirmPassword: { valid: false, message: \"\" },\r\n          firstName: { valid: false, message: \"\" },\r\n          lastName: { valid: false, message: \"\" }\r\n        },\r\n          waiting: false \r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n    }\r\n  }\r\n\r\n  loginClick = () => {\r\n    this.setState({ formMode: \"login\" });\r\n  };\r\n\r\n  registerClick = () => {\r\n    this.setState({ formMode: \"register\" });\r\n  };\r\n\r\n  passwordClick = () => {\r\n    this.setState({ formMode: \"password\" });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.redirectTo !== null && \r\n      this.props.user !== null && \r\n      this.props.user !== undefined && \r\n      this.props.user.firstName !== undefined && \r\n      this.props.user.firstName !== \"\") {\r\n      return (<Redirect to={this.state.redirectTo} />);\r\n    }\r\n    else {\r\n      if (this.state.formMode === \"login\") {\r\n        return (\r\n          <div>\r\n            <h2>Login</h2>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-12\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12 margined\">\r\n                    <FormControl variant=\"outlined\"\r\n                        fullWidth>\r\n                      <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                      <OutlinedInput\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        error={ !this.state.fieldValidation.email.valid }\r\n                        value={this.state.email}\r\n                        onChange={this.handleUserInput}\r\n                        onBlur={this.inputBlur}\r\n                        labelWidth={40}\r\n                        fullWidth\r\n                      />\r\n                      <FormHelperText>{ this.state.fieldValidation.email.message }</FormHelperText>\r\n                    </FormControl>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12 margined\">\r\n                    <FormControl variant=\"outlined\"\r\n                        fullWidth>\r\n                      <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                      <OutlinedInput\r\n                        id=\"outlined-adornment-password\"\r\n                        name=\"password\"\r\n                        type={this.state.showPassword ? 'text' : 'password'}\r\n                        value={this.state.password}\r\n                        error={ !this.state.fieldValidation.password.valid }\r\n                        onChange={this.handleUserInput}\r\n                        onBlur={this.inputBlur}\r\n                        endAdornment={\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={this.handleClickShowPassword}\r\n                              onMouseDown={this.handleMouseDownPassword}\r\n                              edge=\"end\"\r\n                            >\r\n                              {this.state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        }\r\n                        labelWidth={70}\r\n                        fullWidth\r\n                      />\r\n                      <FormHelperText>{ this.state.fieldValidation.password.message }</FormHelperText>\r\n                    </FormControl>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12 margined\">\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={this.state.remember}\r\n                          onChange={this.handleUserInput}\r\n                          name=\"remember\"\r\n                          color=\"primary\"\r\n                        />\r\n                      }\r\n                      label=\"Remember Me\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-12\">\r\n                <div className=\"float-left\">\r\n                  <Link\r\n                    onClick={this.registerClick}\r\n                  >\r\n                    Register\r\n                  </Link>{\" \"}\r\n                  <Link\r\n                    onClick={this.passwordClick}\r\n                  >\r\n                    Forgot Password\r\n                  </Link>\r\n                </div>\r\n                <div className=\"float-right\">\r\n                  <Button className=\"w-200\" \r\n                    variant=\"contained\" color=\"primary\"\r\n                    disabled={this.state.waiting}\r\n                    onClick={this.onSubmit}\r\n                    type=\"submit\">{this.state.waiting ? \"Please Wait\" : \"Submit\"}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.message}\r\n            {\r\n              Object.keys(this.state.fieldValidation).map((fieldName, i) => {\r\n                if (this.state.fieldValidation[fieldName] !== undefined && this.state.fieldValidation[fieldName].message.length > 0) {\r\n                  return (\r\n                    <p className=\"redFont\" key={i}>\r\n                      {this.state.fieldValidation[fieldName].message}\r\n                    </p>\r\n                  );\r\n                } else {\r\n                  return \"\";\r\n                }\r\n              })\r\n            }\r\n          </div>\r\n        );\r\n      } else if (this.state.formMode === \"register\") {\r\n        return (\r\n          <div>\r\n            <h2>Register</h2>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-12\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-12 margined\">\r\n                        <FormControl variant=\"outlined\"\r\n                            fullWidth>\r\n                          <InputLabel htmlFor=\"firstName\">First Name</InputLabel>\r\n                          <OutlinedInput\r\n                            id=\"firstName\"\r\n                            name=\"firstName\"\r\n                            type=\"text\"\r\n                            value={this.state.firstName}\r\n                            error={ !this.state.fieldValidation.firstName.valid }\r\n                            onChange={this.handleUserInput}\r\n                            onBlur={this.inputBlur}\r\n                            labelWidth={80}\r\n                            fullWidth\r\n                          />\r\n                          <FormHelperText>{ this.state.fieldValidation.firstName.message }</FormHelperText>\r\n                        </FormControl>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-12 margined\">\r\n                        <FormControl variant=\"outlined\"\r\n                          fullWidth>\r\n                          <InputLabel htmlFor=\"lastName\">Last Name</InputLabel>\r\n                          <OutlinedInput\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            type=\"text\"\r\n                            value={this.state.lastName}\r\n                            error={ !this.state.fieldValidation.lastName.valid }\r\n                            onChange={this.handleUserInput}\r\n                            onBlur={this.inputBlur}\r\n                            labelWidth={80}\r\n                            fullWidth\r\n                          />\r\n                          <FormHelperText>{ this.state.fieldValidation.lastName.message }</FormHelperText>\r\n                        </FormControl>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-sm-6\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-12 margined\">\r\n                        <FormControl variant=\"outlined\"\r\n                            fullWidth>\r\n                          <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                          <OutlinedInput\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            value={this.state.email}\r\n                            error={ !this.state.fieldValidation.email.valid }\r\n                            onChange={this.handleUserInput}\r\n                            onBlur={this.inputBlur}\r\n                            labelWidth={40}\r\n                            fullWidth\r\n                          />\r\n                          <FormHelperText>{ this.state.fieldValidation.email.message }</FormHelperText>\r\n                        </FormControl>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-12 margined\">\r\n                        <FormControl variant=\"outlined\"\r\n                          fullWidth>\r\n                          <InputLabel htmlFor=\"confirmEmail\">Confirm Email</InputLabel>\r\n                          <OutlinedInput\r\n                            id=\"confirmEmail\"\r\n                            name=\"confirmEmail\"\r\n                            type=\"email\"\r\n                            error={ !this.state.fieldValidation.confirmEmail.valid }\r\n                            value={this.state.confirmEmail}\r\n                            onChange={this.handleUserInput}\r\n                            onBlur={this.inputBlur}\r\n                            labelWidth={100}\r\n                            fullWidth\r\n                          />\r\n                          <FormHelperText>{ this.state.fieldValidation.confirmEmail.message }</FormHelperText>\r\n                        </FormControl>\r\n                      </div>\r\n                    </div>\r\n                  </div> \r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12 margined\">\r\n                    <FormControl variant=\"outlined\"\r\n                        fullWidth>\r\n                      <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                      <OutlinedInput\r\n                        id=\"outlined-adornment-password\"\r\n                        name=\"password\"\r\n                        type={this.state.showPassword ? 'text' : 'password'}\r\n                        value={this.state.password}\r\n                        error={ !this.state.fieldValidation.password.valid }\r\n                        onChange={this.handleUserInput}\r\n                        onBlur={this.inputBlur}\r\n                        endAdornment={\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={this.handleClickShowPassword}\r\n                              onMouseDown={this.handleMouseDownPassword}\r\n                              edge=\"end\"\r\n                            >\r\n                              {this.state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        }\r\n                        labelWidth={70}\r\n                        fullWidth\r\n                      />\r\n                      <FormHelperText>{ this.state.fieldValidation.password.message }</FormHelperText>\r\n                    </FormControl>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12 margined\">\r\n                    <FormControl variant=\"outlined\"\r\n                        fullWidth>\r\n                      <InputLabel htmlFor=\"confirm-password\">Confirm Password</InputLabel>\r\n                      <OutlinedInput\r\n                        id=\"confirm-password\"\r\n                        name=\"confirmPassword\"\r\n                        type={this.state.showPassword ? 'text' : 'password'}\r\n                        value={this.state.confirmPassword}\r\n                        error={ !this.state.fieldValidation.confirmPassword.valid }\r\n                        onChange={this.handleUserInput}\r\n                        onBlur={this.inputBlur}\r\n                        endAdornment={\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={this.handleClickShowPassword}\r\n                              onMouseDown={this.handleMouseDownPassword}\r\n                              edge=\"end\"\r\n                            >\r\n                              {this.state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        }\r\n                        labelWidth={130}\r\n                        fullWidth\r\n                      />\r\n                      <FormHelperText>{ this.state.fieldValidation.confirmPassword.message }</FormHelperText>\r\n                    </FormControl>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-12\">\r\n                <div className=\"float-left\">\r\n                  <Link\r\n                    onClick={this.loginClick}\r\n                  >\r\n                    Login\r\n                  </Link>{\" \"}\r\n                  <Link\r\n                    onClick={this.passwordClick}\r\n                  >\r\n                    Forgot Password\r\n                  </Link>{\" \"}\r\n                </div>\r\n                <div className=\"float-right\">\r\n                  <Button className=\"w200\" disabled={this.state.waiting}\r\n                    onClick={this.onSubmit}\r\n                    type=\"submit\">{this.state.waiting ? \"Please Wait\" : \"Submit\"}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.message}\r\n            {\r\n              Object.keys(this.state.fieldValidation).map((fieldName, i) => {\r\n                if (this.state.fieldValidation[fieldName] !== undefined && this.state.fieldValidation[fieldName].message.length > 0) {\r\n                  return (\r\n                    <p className=\"redFont\" key={i}>\r\n                      {this.state.fieldValidation[fieldName].message}\r\n                    </p>\r\n                  );\r\n                } else {\r\n                  return \"\";\r\n                }\r\n              })\r\n            }\r\n          </div>\r\n        );\r\n      } else if (this.state.formMode === \"password\") {\r\n        return (\r\n          <div>\r\n            <h2>Forgot Password?</h2>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-12\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-12 margined\">\r\n                    <FormControl variant=\"outlined\"\r\n                        fullWidth>\r\n                      <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                      <OutlinedInput\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        value={this.state.email}\r\n                        error={ !this.state.fieldValidation.email.valid }\r\n                        onChange={this.handleUserInput}\r\n                        onBlur={this.inputBlur}\r\n                        labelWidth={40}\r\n                        fullWidth\r\n                      />\r\n                      <FormHelperText>{ this.state.fieldValidation.email.message }</FormHelperText>\r\n                    </FormControl>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-12\">\r\n                <div className=\"float-left\">\r\n                  <Link\r\n                    onClick={this.registerClick}\r\n                  >\r\n                    Register\r\n                  </Link>{\" \"}\r\n                  <Link\r\n                    onClick={this.loginClick}\r\n                  >\r\n                    Login\r\n                  </Link>\r\n                </div>\r\n                <div className=\"float-right\">\r\n                  <Button className=\"w200\" disabled={this.state.waiting}\r\n                    onClick={this.onSubmit}\r\n                    type=\"submit\">{this.state.waiting ? \"Please Wait\" : \"Submit\"}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.message}\r\n            {\r\n              Object.keys(this.state.fieldValidation).map((fieldName, i) => {\r\n                if (this.state.fieldValidation[fieldName] !== undefined && this.state.fieldValidation[fieldName].message.length > 0) {\r\n                  return (\r\n                    <p className=\"redFont\" key={i}>\r\n                      {this.state.fieldValidation[fieldName].message}\r\n                    </p>\r\n                  );\r\n                } else {\r\n                  return \"\";\r\n                }\r\n              })\r\n            }\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst LoginPage = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default LoginPage;\r\n","\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectPage } from \"../../redux/actions/index\";\r\n\r\n// This is a template to use when creating pages.\r\n// It's recommended not to make your own base component classes,\r\n// but I have just a couple things I want to add to my 'page'\r\n// components.  I'll copy this template whenever creating a\r\n// new 'page' component.\r\n\r\nconst mapStateToProps = state => {\r\n  return { selectedPage: state.app.selectedPage };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  componentDidMount() {\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"col-sm-12\">\r\n        Profile Page\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst UserEditPage = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default UserEditPage;\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n// import { Fab } from \"@material-ui/core\";\r\n\r\n/* \r\n  This component will be used by the WorldDetails component.  It will\r\n  have a link at the top for creating new Things, and will list all\r\n  Things in the selected World, allowing navigation to their Details.  \r\n  The List will have pagination and filtering controls to make it \r\n  easier to manage.\r\n*/\r\nconst mapStateToProps = state => {\r\n  return { \r\n    things: state.app.things,\r\n    types: state.app.types,\r\n    selectedWorld: state.app.selectedWorld,\r\n    user: state.app.user\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n  };\r\n}\r\nclass Index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      expandedPanel: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  handleChange_old = panel => (event, isExpanded) => {\r\n    this.setState({expandedPanel: isExpanded ? panel : false});\r\n  };\r\n  handleChange = panel => {\r\n    this.setState({expandedPanel: this.state.expandedPanel === panel ? false : panel });\r\n  };\r\n\r\n  renderListForType(type) {\r\n    // TODO: Add a PluralName field to types so I can use it here.  It may end up being useful other places too.\r\n    const things = this.props.things.filter(thing => thing.TypeIDs.includes(type._id));\r\n    return (\r\n      <div className=\"Things\">\r\n        <List style={{ width: \"240px\" }}>\r\n          <ListItem>\r\n            <Button \r\n              fullWidth variant=\"contained\" color=\"primary\" \r\n              href={`/thing/create/type_id_${type._id}`}>\r\n              <Add/><ListItemText primary={`Create New ${type.Name}`} />\r\n            </Button>\r\n          </ListItem>\r\n          {\r\n            things.map((thing, i) => {\r\n              return (\r\n                <ListItem key={i}>\r\n                  <Button \r\n                    fullWidth variant=\"contained\" color=\"primary\" \r\n                    href={`/thing/details/${thing._id}`}>\r\n                    <ListItemText primary={thing.Name} className=\"marginLeft\" />\r\n                  </Button>\r\n                </ListItem>\r\n              );\r\n            })\r\n          }\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderMajorTypelessThings() {\r\n    const majorLess = this.props.things.filter(thing => thing.Types.filter(t=>t.Major).length === 0);\r\n    return (\r\n      <div className=\"Things\">\r\n        <List style={{ width: \"240px\" }}>\r\n          <ListItem>\r\n            <Button \r\n              fullWidth variant=\"contained\" color=\"primary\" \r\n              href={`/thing/create`}>\r\n              <Add/><ListItemText primary={`Create New Thing`} />\r\n            </Button>\r\n          </ListItem>\r\n          {\r\n            majorLess.map((thing, i) => {\r\n              return (\r\n                <ListItem key={i}>\r\n                  <Button \r\n                    fullWidth variant=\"contained\" color=\"primary\" \r\n                    href={`/thing/details/${thing._id}`}>\r\n                    <ListItemText primary={thing.Name} className=\"marginLeft\" />\r\n                  </Button>\r\n                </ListItem>\r\n              );\r\n            })\r\n          }\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render_old() {\r\n    const majorless = this.props.things.filter(thing => thing.Types.filter(t=>t.Major).length === 0);\r\n\r\n    return (\r\n      <div>\r\n        <ExpansionPanel expanded={this.state.expandedPanel === \"TYPES\"} onChange={this.handleChange(\"TYPES\")}>\r\n          <ExpansionPanelSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n          >\r\n            Types ({this.props.types.length})\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <List style={{ width: \"240px\" }}>\r\n              <ListItem>\r\n                <Button \r\n                  fullWidth variant=\"contained\" color=\"primary\" \r\n                  href={`/type/create`}>\r\n                  <Add/><ListItemText primary={`Create New Type`} />\r\n                </Button>\r\n              </ListItem>\r\n              {\r\n                this.props.types.map((type, i) => {\r\n                  return (\r\n                    <ListItem key={i}>\r\n                      <Button \r\n                        fullWidth variant=\"contained\" color=\"primary\" \r\n                        href={`/type/details/${type._id}`}>\r\n                        <ListItemText primary={type.Name} className=\"marginLeft\" />\r\n                      </Button>\r\n                    </ListItem>\r\n                  );\r\n                })\r\n              }\r\n            </List>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n        { this.props.types.filter(t=>t.Major).map((type, i) => {\r\n          const things = this.props.things.filter(thing => thing.TypeIDs.includes(type._id));\r\n          return (\r\n          <ExpansionPanel key={i} expanded={this.state.expandedPanel === type._id} onChange={this.handleChange(type._id)}>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n            >\r\n              {type.Name}s ({things.length})\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                <List style={{ width: \"240px\" }}>\r\n                  <ListItem>\r\n                    <Button \r\n                      fullWidth variant=\"contained\" color=\"primary\" \r\n                      href={`/thing/create/type_id_${type._id}`}>\r\n                      <Add/><ListItemText primary={`Create New ${type.Name}`} />\r\n                    </Button>\r\n                  </ListItem>\r\n                  {\r\n                    things.map((thing, i) => {\r\n                      return (\r\n                        <ListItem key={i}>\r\n                          <Button \r\n                            fullWidth variant=\"contained\" color=\"primary\" \r\n                            href={`/thing/details/${thing._id}`}>\r\n                            <ListItemText primary={thing.Name} className=\"marginLeft\" />\r\n                          </Button>\r\n                        </ListItem>\r\n                      );\r\n                    })\r\n                  }\r\n                </List>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n          );\r\n        })}\r\n        <ExpansionPanel expanded={this.state.expandedPanel === \"OTHER\"} onChange={this.handleChange(\"OTHER\")}>\r\n          <ExpansionPanelSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n          >\r\n            Other Things ({majorless.length})\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <List style={{ width: \"240px\" }}>\r\n              <ListItem>\r\n                <Button \r\n                  fullWidth variant=\"contained\" color=\"primary\" \r\n                  href={`/thing/create`}>\r\n                  <Add/><ListItemText primary={`Create New Thing`} />\r\n                </Button>\r\n              </ListItem>\r\n              {\r\n                majorless.map((thing, i) => {\r\n                  return (\r\n                    <ListItem key={i}>\r\n                      <Button \r\n                        fullWidth variant=\"contained\" color=\"primary\" \r\n                        href={`/thing/details/${thing._id}`}>\r\n                        <ListItemText primary={thing.Name} className=\"marginLeft\" />\r\n                      </Button>\r\n                    </ListItem>\r\n                  );\r\n                })\r\n              }\r\n            </List>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const majorless = this.props.things.filter(thing => thing.Types.filter(t=>t.Major).length === 0);\r\n\r\n    return (\r\n      <div>\r\n        <List>\r\n          <ListItem>\r\n            <Grid container spacing={1} direction=\"column\">\r\n              <Grid item>\r\n                {this.state.expandedPanel === \"TYPES\" ? \r\n                    <Tooltip title={`Collapse Types`}>\r\n                      <Button \r\n                        onClick={_ => {this.handleChange(\"TYPES\")}}>\r\n                          <KeyboardArrowDownIcon/>\r\n                      </Button>\r\n                    </Tooltip>\r\n                  :\r\n                    <Tooltip title={`Expand Types`}>\r\n                      <Button \r\n                        onClick={_ => {this.handleChange(\"TYPES\")}}>\r\n                        <KeyboardArrowRightIcon/>\r\n                      </Button>\r\n                    </Tooltip>\r\n                }\r\n                <span className={\"MuiTypography-root MuiListItemText-primary MuiTypography-body1\"}>{`Types (${this.props.types.length})`}</span>\r\n                { this.props.selectedWorld !== null && !this.props.selectedWorld.Public && (this.props.user === null || this.props.selectedWorld.Owner !== this.props.user._id) ?\r\n                  <Tooltip title={`Create New Type`}>\r\n                    <Button \r\n                      href={`/type/create`}>\r\n                      <Add/>\r\n                    </Button>\r\n                  </Tooltip> \r\n                : \"\" }\r\n              </Grid>\r\n              {this.state.expandedPanel === \"TYPES\" ? \r\n                <Grid item>\r\n                  <List style={{ maxWidth: \"300px\" }}>\r\n                    {\r\n                      this.props.types.map((type, i) => {\r\n                        return (\r\n                          <ListItem key={i}>\r\n                            <Tooltip title={`Details for ${type.Name}`}>\r\n                              <Button \r\n                                fullWidth variant=\"contained\" color=\"primary\" \r\n                                href={`/type/details/${type._id}`}>\r\n                                <ListItemText primary={type.Name} className=\"marginLeft\" />\r\n                              </Button>\r\n                            </Tooltip>\r\n                            { this.props.selectedWorld !== null && !this.props.selectedWorld.Public && (this.props.user === null || this.props.selectedWorld.Owner !== this.props.user._id) ?\r\n                              <div>\r\n                                <Tooltip title={`Create New ${type.Name}`}>\r\n                                  <Button \r\n                                    href={`/thing/create/type_id_${type._id}`}>\r\n                                    <Add/>\r\n                                  </Button>\r\n                                </Tooltip>\r\n                                <Tooltip title={`Edit ${type.Name}`}>\r\n                                  <Button \r\n                                    href={`/type/edit/${type._id}`}>\r\n                                    <Edit/>\r\n                                  </Button>\r\n                                </Tooltip>\r\n                              </div>\r\n                            : \"\" }\r\n                          </ListItem>\r\n                        );\r\n                      })\r\n                    }\r\n                  </List>\r\n                </Grid>\r\n              : \"\" }\r\n            </Grid>\r\n          </ListItem>\r\n          { this.props.types.filter(t=>t.Major).map((type, i) => {\r\n            const things = this.props.things.filter(thing => thing.TypeIDs.includes(type._id));\r\n            return (\r\n              <ListItem key={i}>\r\n                <Grid container spacing={1} direction=\"column\">\r\n                  <Grid item>\r\n                    {this.state.expandedPanel === type._id ? \r\n                      <Tooltip title={`Collapse ${type.Name}s`}>\r\n                        <Button \r\n                          onClick={_ => {this.handleChange(type._id)}}>\r\n                          <KeyboardArrowDownIcon/>\r\n                        </Button>\r\n                      </Tooltip>\r\n                      :\r\n                      <Tooltip title={`Expand ${type.Name}s`}>\r\n                        <Button \r\n                          onClick={_ => {this.handleChange(type._id)}}>\r\n                          <KeyboardArrowRightIcon/>\r\n                        </Button>\r\n                      </Tooltip>\r\n                    }\r\n                    <Tooltip title={`Details for ${type.Name}`}>\r\n                      <Button \r\n                        href={`/type/details/${type._id}`}>\r\n                        <ListItemText>{type.Name}s ({things.length})</ListItemText>\r\n                      </Button>\r\n                    </Tooltip>\r\n                    { this.props.selectedWorld !== null && !this.props.selectedWorld.Public && (this.props.user === null || this.props.selectedWorld.Owner !== this.props.user._id) ?\r\n                      <div>\r\n                        <Tooltip title={`Create New ${type.Name}`}>\r\n                          <Button \r\n                            href={`/thing/create/type_id_${type._id}`}>\r\n                            <Add/>\r\n                          </Button>\r\n                        </Tooltip>\r\n                        <Tooltip title={`Edit ${type.Name}`}>\r\n                          <Button \r\n                            href={`/type/edit/${type._id}`}>\r\n                            <Edit/>\r\n                          </Button>\r\n                        </Tooltip>\r\n                      </div>\r\n                    : \"\" }\r\n                  </Grid>\r\n                  {this.state.expandedPanel === type._id ? \r\n                    <Grid item>\r\n                      <List style={{ maxWidth: \"300px\" }}>\r\n                        {\r\n                          things.map((thing, j) => {\r\n                            return (\r\n                              <ListItem key={j}>\r\n                                <Tooltip title={`Details for ${thing.Name}`}>\r\n                                  <Button \r\n                                    fullWidth variant=\"contained\" color=\"primary\" \r\n                                    href={`/thing/details/${thing._id}`}>\r\n                                    <ListItemText primary={thing.Name} className=\"marginLeft\" />\r\n                                  </Button>\r\n                                </Tooltip>\r\n                                { this.props.selectedWorld !== null && !this.props.selectedWorld.Public && (this.props.user === null || this.props.selectedWorld.Owner !== this.props.user._id) ?\r\n                                <Tooltip title={`Edit ${thing.Name}`}>\r\n                                  <Button \r\n                                    href={`/thing/edit/${thing._id}`}>\r\n                                    <Edit/>\r\n                                  </Button>\r\n                                </Tooltip>\r\n                                : \"\" }\r\n                              </ListItem>\r\n                            );\r\n                          })\r\n                        }\r\n                      </List>\r\n                    </Grid>\r\n                  : \"\" }\r\n                </Grid>\r\n              </ListItem>\r\n            );\r\n          })}\r\n          <ListItem>\r\n            <Grid container spacing={1} direction=\"column\">\r\n              <Grid item>\r\n                {this.state.expandedPanel === \"OTHER\" ? \r\n                  <Tooltip title={`Collapse Other Things`}>\r\n                    <Button \r\n                      onClick={_ => {this.handleChange(\"OTHER\")}}>\r\n                      <KeyboardArrowDownIcon/>\r\n                    </Button>\r\n                  </Tooltip>\r\n                  :\r\n                  <Tooltip title={`Expand Other Things`}>\r\n                    <Button \r\n                      onClick={_ => {this.handleChange(\"OTHER\")}}>\r\n                      <KeyboardArrowRightIcon/>\r\n                    </Button>\r\n                  </Tooltip>\r\n                }\r\n                <span className={\"MuiTypography-root MuiListItemText-primary MuiTypography-body1\"}>{`Other Things (${majorless.length})`}</span>\r\n                { this.props.selectedWorld !== null && !this.props.selectedWorld.Public && (this.props.user === null || this.props.selectedWorld.Owner !== this.props.user._id) ?\r\n                <Tooltip title={`Create New Thing`}>\r\n                  <Button \r\n                    href={`/thing/create`}>\r\n                    <Add/>\r\n                  </Button>\r\n                </Tooltip>\r\n                : \"\" }\r\n              </Grid>\r\n              {this.state.expandedPanel === \"OTHER\" ? \r\n                <Grid item>\r\n                  <List style={{ maxWidth: \"300px\" }}>\r\n                    {\r\n                      majorless.map((thing, i) => {\r\n                        return (\r\n                          <ListItem key={i}>\r\n                            <Tooltip title={`Details for ${thing.Name}`}>\r\n                              <Button \r\n                                fullWidth variant=\"contained\" color=\"primary\" \r\n                                href={`/thing/details/${thing._id}`}>\r\n                                <ListItemText primary={thing.Name} className=\"marginLeft\" />\r\n                              </Button>\r\n                            </Tooltip>\r\n                            { this.props.selectedWorld !== null && !this.props.selectedWorld.Public && (this.props.user === null || this.props.selectedWorld.Owner !== this.props.user._id) ?\r\n                            <Tooltip title={`Edit ${thing.Name}`}>\r\n                              <Button \r\n                                href={`/thing/edit/${thing._id}`}>\r\n                                <Edit/>\r\n                              </Button>\r\n                            </Tooltip>\r\n                            : \"\" }\r\n                          </ListItem>\r\n                        );\r\n                      })\r\n                    }\r\n                  </List>\r\n                </Grid>\r\n              : \"\" }\r\n            </Grid>\r\n          </ListItem>\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ThingIndex = connect(mapStateToProps, mapDispatchToProps)(Index);\r\nexport default ThingIndex;\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectWorld, setTypes, setThings, setWorlds, setPublicWorlds } from \"../../redux/actions/index\";\r\nimport API from \"../../api\";\r\nimport Index from \"./Index\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport Delete from \"@material-ui/icons/Delete\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { Fab } from \"@material-ui/core\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedPage: state.app.selectedPage,\r\n    selectedWorld: state.app.selectedWorld,\r\n    selectedWorldID: state.app.selectedWorldID,\r\n    worlds: state.app.worlds,\r\n    publicWorlds: state.app.publicWorlds,\r\n    types: state.app.types,\r\n    things: state.app.things,\r\n    user: state.app.user\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectWorld: worldID => dispatch(selectWorld(worldID)),\r\n    setTypes: types => dispatch(setTypes(types)),\r\n    setThings: things => dispatch(setThings(things)),\r\n    setWorlds: worlds => dispatch(setWorlds(worlds)),\r\n    setPublicWorlds: worlds => dispatch(setPublicWorlds(worlds))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      world: null,\r\n      modalOpen: false,\r\n      redirectTo: null\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    this.props.selectWorld(id);\r\n    setTimeout(() => {\r\n      this.api.selectWorld(id).then(res => {\r\n        this.getTypes();\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  getTypes() {\r\n    this.api.getTypesForWorld().then(res => {\r\n      // console.log(res);\r\n      if (res !== undefined && res.message === undefined) {\r\n        // Add Supers to each type\r\n        const types = res.types;\r\n        types.forEach(t=> {\r\n          t.Supers = [];\r\n          t.SuperIDs.forEach(sID=> {\r\n            t.Supers = t.Supers.concat(types.filter(t2=>t2._id === sID));\r\n          });\r\n        });\r\n        this.props.setTypes(types);\r\n        this.getThings();\r\n      }\r\n    });\r\n  }\r\n  getThings() {\r\n    this.api.getThingsForWorld().then(res => {\r\n      console.log(res);\r\n      if (res !== undefined && res.message === undefined) {\r\n        const things = res.things;\r\n        things.forEach(t=> {\r\n          t.Types = [];\r\n          t.TypeIDs.forEach(tID=> {\r\n            t.Types = t.Types.concat(this.props.types.filter(t2=>t2._id === tID));\r\n          });\r\n        });\r\n        this.props.setThings(things);\r\n      }\r\n    });\r\n  }\r\n\r\n  delete = e => {\r\n    this.api.deleteWorld(this.props.selectedWorldID).then(res=>{\r\n      let worlds = this.props.worlds.filter(t=>t._id!==this.props.selectedWorldID);\r\n      this.props.setWorlds(worlds);\r\n      worlds = this.props.publicWorlds.filter(t=>t._id!==this.props.selectedWorldID);\r\n      this.props.setPublicWorlds(worlds);\r\n      this.api.selectWorld(null);\r\n      this.props.selectWorld(null);\r\n      this.setState({modalOpen: false, redirectTo: `/`});\r\n    });\r\n  }\r\n\r\n  getModalStyle = () => {\r\n    const top = Math.round(window.innerHeight / 2) - 50;\r\n    const left = Math.round(window.innerWidth / 2) - 200;\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(${left}px, ${top}px)`,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirectTo !== null) {\r\n      return <Redirect to={this.state.redirectTo} />;\r\n    } else if (this.props.selectedWorld !== null && !this.props.selectedWorld.Public && (this.props.user === null || this.props.selectedWorld.Owner !== this.props.user._id)) {\r\n      return <Redirect to=\"/\" />;\r\n    } else {\r\n      return (\r\n        <Grid item xs={12} container spacing={0} direction=\"column\">\r\n          {this.props.selectedWorld === null ? (\r\n            \"\"\r\n          ) : (\r\n            <Grid item container spacing={0} direction=\"row\">\r\n              <Grid item xs={9}>\r\n                <h2>{this.props.selectedWorld.Name}</h2>\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                { this.props.user !== null && this.props.user !== null && this.props.selectedWorld.Owner === this.props.user._id ?\r\n                <List>\r\n                  <ListItem>\r\n                    <Tooltip title={`Edit ${this.props.selectedWorld.Name}`}>\r\n                      <Fab size=\"small\" color=\"primary\"\r\n                        href={`/world/edit/${this.props.selectedWorld._id}`}\r\n                      >\r\n                      <Edit />\r\n                      </Fab>\r\n                    </Tooltip>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Tooltip title={`Delete ${this.props.selectedWorld.Name}`}>\r\n                      <Fab size=\"small\" color=\"primary\"\r\n                        onClick={e => {this.setState({modalOpen: true})}}\r\n                      >\r\n                        <Delete />\r\n                      </Fab>\r\n                    </Tooltip>\r\n                  </ListItem>\r\n                </List>\r\n                : \"\" }\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n          <Grid item>\r\n            <Index />\r\n          </Grid>\r\n          {/* <Grid item container spacing={0} direction=\"row\">\r\n            <Grid item xs={6}>\r\n              <TypeIndex />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <ThingIndex />\r\n            </Grid>\r\n          </Grid> */}\r\n          <Modal\r\n              aria-labelledby=\"delete-thing-modal\"\r\n              aria-describedby=\"delete-thing-modal-description\"\r\n              open={this.state.modalOpen}\r\n              onClose={e => {this.setState({modalOpen: false})}}\r\n            >\r\n              <div style={this.getModalStyle()} className=\"paper\">\r\n                <Grid container spacing={1} direction=\"column\">\r\n                  <Grid item>\r\n                    Are you sure you want to delete {this.props.selectedWorld !== null ? this.props.selectedWorld.Name : \"\"}?\r\n                  </Grid>\r\n                  <Grid item>\r\n                    (All external references to it will be left alone and may not work correctly)\r\n                  </Grid>\r\n                  <Grid item container spacing={1} direction=\"row\">\r\n                    <Grid item xs={6}>\r\n                      <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={this.delete}\r\n                      >\r\n                        Yes\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        onClick={e => {this.setState({modalOpen: false})}}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n            </Modal>\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\nconst WorldDetailsPage = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default WorldDetailsPage;\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectPage,\r\n  selectWorld,\r\n  addWorld,\r\n  updateWorld\r\n} from \"../../redux/actions/index\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport API from \"../../api\";\r\n\r\n/* \r\n  This component will take the main portion of the page and is used for\r\n  creating or editing a World.  It will allow the use of Template Worlds\r\n  which come with preloaded Template Types.\r\n*/\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedPage: state.app.selectedPage,\r\n    selectedWorld: state.app.selectedWorld,\r\n    selectedWorldID: state.app.selectedWorldID,\r\n    worlds: state.app.worlds,\r\n    user: state.app.user\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page)),\r\n    selectWorld: worldID => dispatch(selectWorld(worldID)),\r\n    addWorld: world => dispatch(addWorld(world)),\r\n    updateWorld: world => dispatch(updateWorld(world))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      _id: null,\r\n      Name: \"\",\r\n      Public: false,\r\n      fieldValidation: {\r\n        Name: { valid: true, message: \"\" }\r\n      },\r\n      formValid: false,\r\n      message: \"\",\r\n      redirectTo: null\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      const { id } = this.props.match.params;\r\n      if (id !== undefined) {\r\n        const { id } = this.props.match.params;\r\n        let world = this.props.worlds.filter(w => w._id === id);\r\n        if (world.length > 0) {\r\n          world = world[0];\r\n          this.setState({\r\n            Name: world.Name,\r\n            Public: world.Public,\r\n            _id: id\r\n          });\r\n          this.api.selectWorld(id);\r\n          this.props.selectWorld(id);\r\n        }\r\n      } else {\r\n        this.api.selectWorld(null);\r\n        this.props.selectWorld(null);\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  handleUserInput = e => {\r\n    const name = e.target.name;\r\n    const value =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  inputBlur = e => {\r\n    const name = e.target.name;\r\n    const validation = this.validateField(name);\r\n    const fieldValidation = this.state.fieldValidation;\r\n    if (\r\n      fieldValidation[name] !== undefined &&\r\n      fieldValidation[name].valid !== validation.valid\r\n    ) {\r\n      fieldValidation[name].valid = validation.valid;\r\n      fieldValidation[name].message = validation.message;\r\n      this.setState({ fieldValidation: fieldValidation });\r\n    }\r\n  };\r\n\r\n  validateField = fieldName => {\r\n    let value = null;\r\n    let valid = true;\r\n    let message = \"\";\r\n    switch (fieldName) {\r\n      case \"Name\":\r\n        value = this.state[fieldName];\r\n        valid = value.match(/^[a-zA-Z0-9 ]*$/i) !== null;\r\n        if (!valid)\r\n          message = \"Only Letters, Numbers, and Spaces allowed in World Names\";\r\n        else if (value.length < 4) {\r\n          valid = false;\r\n          message = \"World Name is too short\";\r\n        } else {\r\n          valid =\r\n            this.props.worlds.filter(\r\n              w => w.Name === value && w._id !== this.state._id\r\n            ).length === 0;\r\n          if (!valid) message = \"This World Name is already in use\";\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const response = { valid: valid, message: message };\r\n    return response;\r\n  };\r\n\r\n  validateForm = respond => {\r\n    const nameValid = this.validateField(\"Name\");\r\n    const formValid = nameValid.valid;\r\n    const fieldValidation = this.state.fieldValidation;\r\n    fieldValidation.Name = nameValid;\r\n    this.setState(\r\n      {\r\n        formValid: formValid,\r\n        fieldValidation: fieldValidation\r\n      },\r\n      respond\r\n    );\r\n  };\r\n\r\n  onSubmit = () => {\r\n    function respond() {\r\n      if (this.state.formValid) {\r\n        this.setState({ waiting: true }, this.submitThroughAPI);\r\n      }\r\n    }\r\n\r\n    this.validateForm(respond);\r\n  };\r\n\r\n  submitThroughAPI = () => {\r\n    const world = {\r\n      _id: this.state._id,\r\n      Name: this.state.Name,\r\n      Public: this.state.Public,\r\n      Owner: this.props.user._id\r\n    };\r\n\r\n    if (world._id === null) {\r\n      this.api\r\n        .createWorld(world)\r\n        .then(res => {\r\n          if (res.message  !== undefined) {\r\n            this.setState({ message: res.message });\r\n          }\r\n          else {\r\n            world._id = res.worldID;\r\n            this.props.addWorld(world);\r\n            this.setState({\r\n              waiting: false,\r\n              redirectTo: `/world/details/${res.worldID}`\r\n            });\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    } else {\r\n      this.api\r\n        .updateWorld(world)\r\n        .then(res => {\r\n          if (res.message !== `World ${world.Name} updated!`) {\r\n            this.setState({ message: res.message });\r\n          }\r\n          else {\r\n            this.props.updateWorld(world);\r\n            this.setState({\r\n              waiting: false,\r\n              redirectTo: `/world/details/${this.props.selectedWorld._id}`\r\n            });\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.redirectTo !== null) {\r\n      return <Redirect to={this.state.redirectTo} />;\r\n    } else if (this.props.user === null || (this.props.selectedWorld !== null && this.props.selectedWorld.Owner !== this.props.user._id)) {\r\n      return <Redirect to=\"/\" />;\r\n    } else {\r\n      return (\r\n        <Grid item xs={12} container spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <h2>\r\n              {this.state._id === null ? \"Create New World\" : \"Edit World\"}\r\n            </h2>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormControl variant=\"outlined\" fullWidth>\r\n              <InputLabel htmlFor=\"name\">Name</InputLabel>\r\n              <OutlinedInput\r\n                id=\"name\"\r\n                name=\"Name\"\r\n                type=\"text\"\r\n                autoComplete=\"Off\"\r\n                error={!this.state.fieldValidation.Name.valid}\r\n                value={this.state.Name}\r\n                onChange={this.handleUserInput}\r\n                onBlur={this.inputBlur}\r\n                labelWidth={43}\r\n                fullWidth\r\n              />\r\n              <FormHelperText>\r\n                {this.state.fieldValidation.Name.message}\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={this.state.Public}\r\n                  onChange={this.handleUserInput}\r\n                  name=\"Public\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Public\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <div className=\"float-right\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\"w-200\"\r\n                disabled={this.state.waiting}\r\n                onClick={this.onSubmit}\r\n                type=\"submit\"\r\n              >\r\n                {this.state.waiting ? \"Please Wait\" : \"Submit\"}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{ marginLeft: \"4px\" }}\r\n                disabled={this.state.waiting}\r\n                onClick={_ => {\r\n                  this.setState({\r\n                    redirectTo: `/`\r\n                  });\r\n                }}\r\n                type=\"button\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Grid item>{this.state.message}</Grid>\r\n          <Grid item>\r\n            {Object.keys(this.state.fieldValidation).map((fieldName, i) => {\r\n              if (\r\n                this.state.fieldValidation[fieldName] !== undefined &&\r\n                this.state.fieldValidation[fieldName].message.length > 0\r\n              ) {\r\n                return (\r\n                  <p className=\"redFont\" key={i}>\r\n                    {this.state.fieldValidation[fieldName].message}\r\n                  </p>\r\n                );\r\n              } else {\r\n                return \"\";\r\n              }\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst WorldEditPage = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default WorldEditPage;","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectPage,\r\n  updateSelectedType,\r\n  addType,\r\n  updateType,\r\n  setTypes\r\n} from \"../../redux/actions/index\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport Delete from \"@material-ui/icons/Delete\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport API from \"../../api\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { Fab } from \"@material-ui/core\";\r\n\r\n/* \r\n  This component will take the main portion of the page and is used for\r\n  creating or editing a Type.  It will allow the use of Template Types\r\n  and Super Types to make the process faster.\r\n*/\r\n\r\nconst mapStateToProps = state => {\r\n  const type = state.app.selectedType;\r\n  const subTypes =\r\n    type === null\r\n      ? []\r\n      : state.app.types.filter(t => t.SuperIDs.includes(type._id));\r\n  const things =\r\n    type === null\r\n      ? []\r\n      : state.app.things.filter(t => t.TypeIDs.includes(type._id));\r\n  return {\r\n    selectedPage: state.app.selectedPage,\r\n    selectedType: type,\r\n    selectedWorld: state.app.selectedWorld,\r\n    selectedWorldID: state.app.selectedWorldID,\r\n    types: state.app.types,\r\n    subTypes: subTypes,\r\n    instances: things,\r\n    user: state.app.user\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page)),\r\n    updateSelectedType: type => dispatch(updateSelectedType(type)),\r\n    addType: type => dispatch(addType(type)),\r\n    updateType: type => dispatch(updateType(type)),\r\n    setTypes: types => dispatch(setTypes(types))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      _id: null,\r\n      Name: \"\",\r\n      Description: \"\",\r\n      Supers: [],\r\n      Major: false,\r\n      Attributes: [],\r\n      fieldValidation: {\r\n        Name: { valid: true, message: \"\" },\r\n        AttributesArr: { valid: true, message: \"\" }\r\n      },\r\n      formValid: false,\r\n      message: \"\",\r\n      redirectTo: null,\r\n      modalOpen: false\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      const { id } = this.props.match.params;\r\n      if (id !== undefined) { // When I move to storing more in session, this is the kind of place where I'll check.\r\n        this.api.getType(id).then(res => {\r\n          if (res.message === undefined) {\r\n            const supers = this.props.types.filter(type =>\r\n              res.SuperIDs.includes(type._id)\r\n            );\r\n            this.setState({\r\n              Name: res.Name,\r\n              Description: res.Description,\r\n              _id: id,\r\n              Supers: supers,\r\n              Major: res.Major\r\n            });\r\n            this.props.updateSelectedType(res);\r\n          }\r\n          else {\r\n            console.log(res.message);\r\n          }\r\n        });\r\n      } else {\r\n        this.props.updateSelectedType({\r\n          _id: null,\r\n          Name: \"\",\r\n          Description: \"\",\r\n          Supers: [],\r\n          AttributesArr: [],\r\n          Major: false\r\n        });\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  getModalStyle = () => {\r\n    const top = Math.round(window.innerHeight / 2) - 50;\r\n    const left = Math.round(window.innerWidth / 2) - 200;\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(${left}px, ${top}px)`,\r\n    };\r\n  }\r\n\r\n  delete = e => {\r\n    this.api.deleteType(this.state._id).then(res=>{\r\n      const types = this.props.types.filter(t=>t._id!==this.state._id);\r\n      this.props.setTypes(types);\r\n      this.setState({redirectTo: `/world/details/${this.props.selectedWorldID}`})\r\n    });\r\n  }\r\n\r\n  render() { \r\n    if (this.state.redirectTo !== null) {\r\n      return <Redirect to={this.state.redirectTo} />;\r\n    } else if (this.props.user === null || (this.props.selectedWorld !== null && !this.props.selectedWorld.Public && this.props.selectedWorld.Owner !== this.props.user._id)) {\r\n      return <Redirect to=\"/\" />;\r\n    } else {\r\n      const references = this.props.types.filter(t=>t.ReferenceIDs !== undefined && t.ReferenceIDs.includes(this.state._id));\r\n      return (\r\n        <Grid item xs={12} container spacing={0} direction=\"column\">\r\n          <Grid item container spacing={0} direction=\"row\">\r\n            <Grid item xs={6}>\r\n              <h2>{this.state.Name}</h2>\r\n            </Grid>\r\n            <Grid item sm={3} xs={6}>\r\n              <h3>{this.state.Major ? \"Major Type\" : \"\"}</h3>\r\n            </Grid>\r\n            <Grid item sm={3} xs={12}>\r\n              { this.props.user !== null && this.props.selectedWorld !== null && this.props.selectedWorld.Owner === this.props.user._id ?\r\n              <List>\r\n                <ListItem>\r\n                  <Tooltip title={`Create New ${this.state.Name}`}>\r\n                    <Fab size=\"small\"\r\n                      color=\"primary\"\r\n                      href={`/thing/create/type_id_${this.state._id}`}\r\n                    >\r\n                      <Add />\r\n                    </Fab>\r\n                  </Tooltip>\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Tooltip title={`Edit ${this.state.Name}`}>\r\n                    <Fab size=\"small\"\r\n                      color=\"primary\"\r\n                      href={`/type/edit/${this.state._id}`}\r\n                    >\r\n                      <Edit />\r\n                    </Fab>\r\n                  </Tooltip>\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Tooltip title={`Delete ${this.state.Name}`}>\r\n                    <Fab size=\"small\"\r\n                      color=\"primary\"\r\n                      onClick={e => {this.setState({modalOpen: true})}}\r\n                    >\r\n                      <Delete />\r\n                    </Fab>\r\n                  </Tooltip>\r\n                </ListItem>\r\n              </List>\r\n              : \"\" }\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container spacing={0} direction=\"row\">\r\n            <Grid item sm={9} xs={12} container spacing={0} direction=\"column\">\r\n              <Grid item>{this.state.Description}</Grid>\r\n              <Grid item>\r\n                Attributes\r\n                <List>\r\n                  {this.props.selectedType === null ||\r\n                  this.props.selectedType === undefined\r\n                    ? \"\"\r\n                    : this.props.selectedType.AttributesArr.map(\r\n                        (attribute, i) => {\r\n                          return (\r\n                            <ListItem key={i}>\r\n                              <ListItemText>\r\n                                {attribute.Name}:&nbsp;\r\n                                {attribute.Type === \"Options\" ? (\r\n                                  <span>\r\n                                    Options:\r\n                                    {attribute.Options.map((option, j) => {\r\n                                      return (\r\n                                        <span key={j}>\r\n                                          {j === 0 ? \" \" : \", \"}\r\n                                          {option}\r\n                                        </span>\r\n                                      );\r\n                                    })}\r\n                                  </span>\r\n                                ) : attribute.Type === \"Type\" ? (\r\n                                  <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    href={`/type/details/${attribute.Type2}`}\r\n                                  >\r\n                                    <ListItemText primary={this.props.types.filter(t=>t._id === attribute.Type2)[0].Name}/>\r\n                                  </Button>\r\n                                ) : attribute.Type === \"List\" ? (\r\n                                  <span>\r\n                                    List:&nbsp;\r\n                                    {attribute.ListType === \"Options\" ? (\r\n                                      <span>\r\n                                        Options:\r\n                                        {attribute.Options.map((option, j) => {\r\n                                          return (\r\n                                            <span key={j}>\r\n                                              {j === 0 ? \" \" : \", \"}\r\n                                              {option}\r\n                                            </span>\r\n                                          );\r\n                                        })}\r\n                                      </span>\r\n                                    ) : attribute.ListType === \"Type\" ? (\r\n                                      <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        href={`/type/details/${attribute.Type2}`}\r\n                                      >\r\n                                        <ListItemText primary={this.props.types.filter(t=>t._id === attribute.Type2)[0].Name}/>\r\n                                      </Button>\r\n                                    ) : (\r\n                                      attribute.ListType\r\n                                    )}\r\n                                  </span>\r\n                                ) : (\r\n                                  attribute.Type\r\n                                )}\r\n                              </ListItemText>\r\n                            </ListItem>\r\n                          );\r\n                        }\r\n                      )}\r\n                </List>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item sm={3} xs={12} container spacing={0} direction=\"column\">\r\n              {this.state.Supers.length === 0 ? (\r\n                \"\"\r\n              ) : (\r\n                <Grid item>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary={\"Super Types\"} />\r\n                    </ListItem>\r\n                    {this.state.Supers.map((superType, i) => {\r\n                      return (\r\n                        <ListItem key={i}>\r\n                          <Button fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={`/type/details/${superType._id}`}\r\n                          >\r\n                            <ListItemText primary={superType.Name} />\r\n                          </Button>\r\n                        </ListItem>\r\n                      );\r\n                    })}\r\n                  </List>\r\n                </Grid>\r\n              )}\r\n              {this.props.subTypes.length === 0 ? (\r\n                \"\"\r\n              ) : (\r\n                <Grid item>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary={\"Sub Types\"} />\r\n                    </ListItem>\r\n                    {this.props.subTypes.map((sub, i) => {\r\n                      return (\r\n                        <ListItem key={i}>\r\n                          <Button fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={`/type/details/${sub._id}`}\r\n                          >\r\n                            <ListItemText primary={sub.Name} />\r\n                          </Button>\r\n                        </ListItem>\r\n                      );\r\n                    })}\r\n                  </List>\r\n                </Grid>\r\n              )}\r\n              {references.length === 0 ? (\r\n                \"\"\r\n              ) : (\r\n                <Grid item>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary={\"Referenced in:\"} />\r\n                    </ListItem>\r\n                    {references.map((type, i) => {\r\n                      return (\r\n                        <ListItem key={i}>\r\n                          <Button fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={`/type/details/${type._id}`}\r\n                          >\r\n                            <ListItemText primary={type.Name} />\r\n                          </Button>\r\n                        </ListItem>\r\n                      );\r\n                    })}\r\n                  </List>\r\n                </Grid>\r\n              )}\r\n              {this.props.instances.length === 0 ? (\r\n                \"\"\r\n              ) : (\r\n                <Grid item>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary={\"Instances\"} />\r\n                    </ListItem>\r\n                    {this.props.instances.map((thing, i) => {\r\n                      return (\r\n                        <ListItem key={i}>\r\n                          <Button fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={`/thing/details/${thing._id}`}\r\n                          >\r\n                            <ListItemText primary={thing.Name} />\r\n                          </Button>\r\n                        </ListItem>\r\n                      );\r\n                    })}\r\n                  </List>\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Modal\r\n            aria-labelledby=\"delete-type-modal\"\r\n            aria-describedby=\"delete-type-modal-description\"\r\n            open={this.state.modalOpen}\r\n            onClose={e => {this.setState({modalOpen: false})}}\r\n          >\r\n            <div style={this.getModalStyle()} className=\"paper\">\r\n              <Grid container spacing={1} direction=\"column\">\r\n                <Grid item>\r\n                  Are you sure you want to delete {this.state.Name}?\r\n                </Grid>\r\n                <Grid item>\r\n                  (All references to it will be left alone and may not work correctly)\r\n                </Grid>\r\n                <Grid item container spacing={1} direction=\"row\">\r\n                  <Grid item xs={6}>\r\n                    <Button\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={this.delete}\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Button\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      onClick={e => {this.setState({modalOpen: false})}}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Modal>\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst TypeDetails = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default TypeDetails;\r\n","/* eslint-disable no-use-before-define */\r\nimport React, { useState } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport DeleteForever from \"@material-ui/icons/DeleteForever\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ChipInput from \"material-ui-chip-input\";\r\n\r\nconst handleTypeChange = (e, props) => {\r\n  const attr = props.attribute;\r\n  attr[\"Type\"] = e.target.value;\r\n  props.onChange(attr);\r\n};\r\n\r\nconst handleType2Change = (e, props) => {\r\n  const attr = props.attribute;\r\n  attr[\"Type2\"] = e.target.value;\r\n  if (e.target.value === \"new\") {\r\n    function respond(newType) {\r\n      attr[\"Type2\"] = newType._id;\r\n      props.onChange(attr);\r\n    }\r\n    props.onNewType(respond);\r\n  }\r\n  else \r\n    props.onChange(attr);\r\n};\r\n\r\nconst handleListTypeChange = (e, props) => {\r\n  const attr = props.attribute;\r\n  attr[\"ListType\"] = e.target.value;\r\n  props.onChange(attr);\r\n};\r\n\r\nconst handleOptionsChange = (e, props) => {\r\n  const attr = props.attribute;\r\n  attr.Options = e;\r\n  props.onChange(attr);\r\n};\r\n\r\nexport default function AttributeControl(props) {\r\n  const [name, changeName] = useState(props.attribute.Name);\r\n\r\n  const attributeTypes = [\r\n    \"Text\",\r\n    \"Number\",\r\n    \"True/False\",\r\n    \"Options\", \r\n    \"Type\", \r\n    \"List\"\r\n  ];\r\n  const type =\r\n    props.attribute.Type === \"\" ? attributeTypes[0] : props.attribute.Type;\r\n\r\n  const listTypes = [\r\n    \"Text\",\r\n    \"Options\", \r\n    \"Type\"\r\n  ];\r\n\r\n  return (\r\n    <Grid container spacing={1} direction=\"row\">\r\n      <Grid item sm={3} xs={12}>\r\n        <FormControl variant=\"outlined\" fullWidth>\r\n          <InputLabel htmlFor=\"AttrName\">Name</InputLabel>\r\n          <OutlinedInput\r\n            disabled={props.attribute.FromSupers.length > 0}\r\n            id=\"AttrName\"\r\n            name=\"AttrName\"\r\n            type=\"text\"\r\n            error={props.error}\r\n            value={name}\r\n            autoComplete=\"off\"\r\n            onChange={e => {\r\n              changeName(e.target.value);\r\n            }}\r\n            onBlur={e => {\r\n              const attr = {\r\n                index: props.attribute.index,\r\n                Name: name,\r\n                Type: props.attribute.Type,\r\n                Options: props.attribute.Options,\r\n                ListType: props.attribute.ListType,\r\n                FromSupers: props.attribute.FromSupers,\r\n                Type2: props.attribute.Type2,\r\n                AttributeTypes: props.attribute.AttributeTypes\r\n              };\r\n              props.onChange(attr);\r\n            }}\r\n            labelWidth={43}\r\n            fullWidth\r\n          />\r\n          <FormHelperText>{props.message}</FormHelperText>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item sm={3} xs={12}>\r\n        <FormControl variant=\"outlined\" fullWidth>\r\n          <InputLabel htmlFor=\"attribute-type\" id=\"attribute-type-label\">\r\n            Attribute Type\r\n          </InputLabel>\r\n          <Select\r\n            labelId=\"attribute-type-label\"\r\n            id=\"attribute-type\"\r\n            disabled={props.attribute.FromSupers.length > 0} \r\n            value={props.attribute.Type}\r\n            onChange={e => {handleTypeChange(e, props)}}\r\n            fullWidth\r\n            labelWidth={100}\r\n          >\r\n            {attributeTypes.map((type, i) => {\r\n              return (<MenuItem key={i} value={type}>{type}</MenuItem>);\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item sm={3} xs={12}>\r\n        {type === \"Options\" ? (\r\n          <ChipInput\r\n            variant=\"outlined\"\r\n            disabled={props.attribute.FromSupers.length > 0}\r\n            defaultValue={props.attribute.Options}\r\n            onChange={chips => handleOptionsChange(chips, props)}\r\n          />\r\n        ) : type === \"Type\" ? (\r\n          <FormControl variant=\"outlined\" fullWidth>\r\n            <InputLabel htmlFor=\"type2\" id=\"type2-label\">\r\n              Defined Type\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"type2-label\"\r\n              id=\"type2\"\r\n              disabled={props.attribute.FromSupers.length > 0} \r\n              value={props.attribute.Type2}\r\n              onChange={e => {handleType2Change(e, props)}}\r\n              fullWidth\r\n              labelWidth={100}\r\n            >\r\n              <MenuItem value=\"new\">+ Create New Type</MenuItem>\r\n              {props.types.map((type, i) => {\r\n                return (<MenuItem key={i} value={type._id}>{type.Name}</MenuItem>);\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n        ) : type === \"List\" ? (\r\n          <Grid container spacing={1} direction=\"column\">\r\n            <Grid item>\r\n              <FormControl variant=\"outlined\" fullWidth>\r\n                <InputLabel htmlFor=\"list-type\" id=\"list-type-label\">\r\n                  List Type\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"list-type-label\"\r\n                  id=\"list-type\"\r\n                  disabled={props.attribute.FromSupers.length > 0} \r\n                  value={props.attribute.ListType}\r\n                  onChange={e => {handleListTypeChange(e, props)}}\r\n                  fullWidth\r\n                  labelWidth={70}\r\n                >\r\n                  {listTypes.map((type, i) => {\r\n                    return (<MenuItem key={i} value={type}>{type}</MenuItem>);\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            { props.attribute.ListType === \"Type\" ? \r\n              (\r\n                <Grid item>\r\n                  <FormControl variant=\"outlined\" fullWidth>\r\n                    <InputLabel htmlFor=\"type2\" id=\"type2-label\">\r\n                      Defined Type\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"type2-label\"\r\n                      id=\"type2\"\r\n                      disabled={props.attribute.FromSupers.length > 0} \r\n                      value={props.attribute.Type2}\r\n                      onChange={e => {handleType2Change(e, props)}}\r\n                      fullWidth\r\n                      labelWidth={100}\r\n                    >\r\n                      <MenuItem value=\"new\">+ Create New Type</MenuItem>\r\n                      {props.types.map((type, i) => {\r\n                        return (<MenuItem key={i} value={type._id}>{type.Name}</MenuItem>);\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n              ) : props.attribute.ListType === \"Options\" ?\r\n              (\r\n                <Grid item>\r\n                  <ChipInput\r\n                    variant=\"outlined\"\r\n                    disabled={props.attribute.FromSupers.length > 0}\r\n                    defaultValue={props.attribute.Options}\r\n                    onChange={chips => handleOptionsChange(chips, props)}\r\n                  />\r\n                </Grid>\r\n              ) : \"\"\r\n            }\r\n          </Grid>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Grid>\r\n      <Grid item sm={3} xs={12}>\r\n        <Button\r\n          variant=\"contained\" color=\"primary\"\r\n          className=\"w200\" fullWidth\r\n          disabled={props.attribute.FromSupers.length > 0}\r\n          onClick={_ => props.onDelete(props.attribute)}\r\n          type=\"submit\"\r\n        >\r\n          <DeleteForever />\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport {\r\n  updateSelectedType,\r\n  updateAttributesArr,\r\n  addType\r\n} from \"../../redux/actions/index\";\r\nimport AttributeControl from \"./AttributeControl\";\r\nimport API from \"../../api\";\r\n\r\nconst Label = styled(\"label\")`\r\n  padding: 0 0 4px;\r\n  line-height: 1.5;\r\n  display: block;\r\n`;\r\n\r\n// It will let you add and remove attributes.\r\n// Each needs to have a unique name as part of validation.\r\n// Each also needs to have a valid type.\r\n// The type can be string, integer, double, enum, any Type\r\n// already defined for this world, or a list of any of the\r\n// other types.\r\n// In future versions I will add support for additional types:\r\n// Color, DateTime, Schedule.\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedType: state.app.selectedType,\r\n    attributesArr: state.app.attributesArr,\r\n    types: state.app.types,\r\n    selectedWorldID: state.app.selectedWorldID\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    updateSelectedType: type => dispatch(updateSelectedType(type)),\r\n    updateAttributesArr: arr => dispatch(updateAttributesArr(arr)),\r\n    addType: type => dispatch(addType(type)),\r\n  };\r\n}\r\nclass Control extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalOpen: false,\r\n      Name: \"\",\r\n      fieldValidation: {\r\n        Name: { valid: true, message: \"\" }\r\n      },\r\n      formValid: false,\r\n      message: \"\",\r\n      waiting: false\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  newAttribute = () => {\r\n    const type = this.props.selectedType;\r\n    type.AttributesArr.push({\r\n      index: type.AttributesArr.length,\r\n      Name: \"\",\r\n      Type: \"Text\",\r\n      Options: [],\r\n      Type2: \"\",\r\n      ListType: \"\",\r\n      FromSupers: [],\r\n      AttributeTypes: [\"Text\", \"Number\", \"True/False\", \"Options\", \"Type\", \"List\"]\r\n    });\r\n    this.props.updateSelectedType(type);\r\n  };\r\n\r\n  changeAttribute = value => {\r\n    const type = this.props.selectedType;\r\n    type.AttributesArr[value.index] = {\r\n      index: value.index,\r\n      Name: value.Name,\r\n      Type: value.Type,\r\n      Options: value.Options,\r\n      Type2: value.Type2,\r\n      ListType: value.ListType,\r\n      FromSupers: value.FromSupers,\r\n      AttributeTypes: [\"Text\", \"Number\", \"True/False\", \"Options\", \"Type\", \"List\"]\r\n    };\r\n    this.props.updateSelectedType(type);\r\n  };\r\n\r\n  blurAttribute = e => {\r\n  };\r\n\r\n  deleteAttribute = value => {\r\n    const type = this.props.selectedType;\r\n    const attributesArr = [];\r\n    type.AttributesArr.forEach(t => {\r\n      if (t.index !== value.index) {\r\n        if (t.index > value.index)\r\n          t.index--;\r\n        attributesArr.push(t);\r\n      }\r\n    });\r\n    type.AttributesArr = [];\r\n    this.props.updateSelectedType(type);\r\n    setTimeout(() => {\r\n      type.AttributesArr = attributesArr;\r\n      this.props.updateSelectedType(type);\r\n    }, 500);\r\n  };\r\n  \r\n  getModalStyle = () => {\r\n    const top = Math.round(window.innerHeight / 2) - 50;\r\n    const left = Math.round(window.innerWidth / 2) - 200;\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(${left}px, ${top}px)`,\r\n    };\r\n  }\r\n\r\n  addNewType = (respond) => {\r\n    // Opens a Modal where they enter a name.\r\n    this.setState({modalOpen: true, modalSubmit: respond});\r\n  }\r\n\r\n  handleUserInput = e => {\r\n    const name = e.target.name;\r\n    const value =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  inputBlur = e => {\r\n    const name = e.target.name;\r\n    const validation = this.validateField(name);\r\n    const fieldValidation = this.state.fieldValidation;\r\n    if (\r\n      fieldValidation[name] !== undefined &&\r\n      fieldValidation[name].valid !== validation.valid\r\n    ) {\r\n      fieldValidation[name].valid = validation.valid;\r\n      fieldValidation[name].message = validation.message;\r\n      this.setState({ fieldValidation: fieldValidation });\r\n    }\r\n  };\r\n\r\n  validateField = fieldName => {\r\n    let value = null;\r\n    let valid = true;\r\n    let message = \"\";\r\n    switch (fieldName) {\r\n      case \"Name\":\r\n        value = this.state[fieldName];\r\n        valid = value.match(/^[a-zA-Z0-9 ]*$/i) !== null;\r\n        if (!valid)\r\n          message = \"Only Letters, Numbers, and Spaces allowed in Type Names\";\r\n        else if (value.length < 2) {\r\n          valid = false;\r\n          message = \"Type Name is too short\";\r\n        } else {\r\n          valid =\r\n            this.props.types.filter(\r\n              t => t.Name === value && t._id !== this.state._id\r\n            ).length === 0;\r\n          if (!valid) message = \"This Type Name is already in use\";\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const response = { valid: valid, message: message };\r\n    return response;\r\n  };\r\n\r\n  validateForm = respond => {\r\n    const nameValid = this.validateField(\"Name\");\r\n    const formValid = nameValid.valid;\r\n    const fieldValidation = this.state.fieldValidation;\r\n    fieldValidation.Name = nameValid;\r\n    this.setState(\r\n      {\r\n        formValid: formValid,\r\n        fieldValidation: fieldValidation\r\n      },\r\n      respond\r\n    );\r\n  };\r\n\r\n  saveNewType = () => {\r\n    function respond() {\r\n      if (this.state.formValid) {\r\n        this.setState({ waiting: true }, this.submitThroughAPI);\r\n      }\r\n    }\r\n\r\n    this.validateForm(respond);\r\n  };\r\n\r\n  submitThroughAPI = () => {\r\n    const type = {\r\n      _id: null,\r\n      Name: this.state.Name,\r\n      Description: \"\",\r\n      SuperIDs: [],\r\n      AttributesArr: [],\r\n      WorldID: this.props.selectedWorldID,\r\n      Major: false\r\n    };\r\n\r\n    // Calls API\r\n    this.api\r\n      .createType(type)\r\n      .then(res => {\r\n        if (res.typeID !== undefined) {\r\n          type._id = res.typeID;\r\n          // Adds to props \r\n          this.props.addType(type);\r\n          // Calls respond back to Attribute to set the type\r\n          this.state.modalSubmit(type);\r\n          this.setState({\r\n            waiting: false, \r\n            modalOpen: false\r\n          });\r\n        }\r\n        else if (res.message !== undefined) {\r\n          this.setState({\r\n            waiting: false, \r\n            message: res.message \r\n          });\r\n        }\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Grid item xs={12} container spacing={0} direction=\"column\">\r\n        <Grid item>\r\n          <Label>Attributes</Label>\r\n        </Grid>\r\n        <Grid item>\r\n          <List>\r\n            <ListItem>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={this.newAttribute}>\r\n                <Add />\r\n                <ListItemText primary={\"Create New\"} />\r\n              </Button>\r\n            </ListItem>\r\n            {this.props.selectedType === null ||\r\n            this.props.selectedType === undefined\r\n              ? \"\"\r\n              : this.props.selectedType.AttributesArr.map((attribute, i) => {\r\n                  return (\r\n                    <ListItem key={i}>\r\n                      <AttributeControl\r\n                        typeID={this.props.selectedType._id}\r\n                        attribute={attribute}\r\n                        onChange={this.changeAttribute}\r\n                        onDelete={this.deleteAttribute}\r\n                        onBlur={this.blurAttribute}\r\n                        types={this.props.types}\r\n                        onNewType={this.addNewType}\r\n                      />\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n          </List>\r\n        </Grid>\r\n        <Modal\r\n          aria-labelledby=\"new-type-modal\"\r\n          aria-describedby=\"new-type-modal-description\"\r\n          open={this.state.modalOpen}\r\n          onClose={e => {this.setState({modalOpen: false})}}\r\n        >\r\n          <div style={this.getModalStyle()} className=\"paper\">\r\n            <Grid container spacing={1} direction=\"column\">\r\n              <Grid item>\r\n                Just give the new Type a name.\r\n              </Grid>\r\n              <Grid item>\r\n                (You can do the rest later.)\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel htmlFor=\"name\">Name</InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"name\"\r\n                    name=\"Name\"\r\n                    type=\"text\"\r\n                    autoComplete=\"Off\"\r\n                    error={!this.state.fieldValidation.Name.valid}\r\n                    value={this.state.Name}\r\n                    onChange={this.handleUserInput}\r\n                    onBlur={this.inputBlur}\r\n                    labelWidth={43}\r\n                    fullWidth\r\n                  />\r\n                  <FormHelperText>\r\n                    {this.state.fieldValidation.Name.message}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item container spacing={1} direction=\"row\">\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={this.state.waiting}\r\n                    onClick={this.saveNewType}\r\n                  >\r\n                    {this.state.waiting ? \"Please Wait\" : \"Submit\"}\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    onClick={e => {this.setState({modalOpen: false})}}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Modal>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst AttributesControl = connect(mapStateToProps, mapDispatchToProps)(Control);\r\nexport default AttributesControl;\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectPage,\r\n  updateSelectedType,\r\n  addType,\r\n  updateType\r\n} from \"../../redux/actions/index\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport AttributesControl from \"./AttributesControl\";\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport API from \"../../api\";\r\n\r\n/* \r\n  This component will take the main portion of the page and is used for\r\n  creating or editing a Type.  It will allow the use of Template Types\r\n  and Super Types to make the process faster.\r\n*/\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedPage: state.app.selectedPage,\r\n    selectedType: state.app.selectedType,\r\n    selectedWorld: state.app.selectedWorld,\r\n    selectedWorldID: state.app.selectedWorldID,\r\n    types: state.app.types,\r\n    user: state.app.user\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page)),\r\n    updateSelectedType: type => dispatch(updateSelectedType(type)),\r\n    addType: type => dispatch(addType(type)),\r\n    updateType: type => dispatch(updateType(type))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      _id: null,\r\n      Name: \"\",\r\n      Description: \"\",\r\n      Supers: [],\r\n      Attributes: [],\r\n      Major: false,\r\n      fieldValidation: {\r\n        Name: { valid: true, message: \"\" },\r\n        AttributesArr: { valid: true, message: \"\" }\r\n      },\r\n      formValid: false,\r\n      message: \"\",\r\n      redirectTo: null\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      const { id } = this.props.match.params;\r\n      if (id !== undefined) {\r\n        this.api.getType(id).then(res => {\r\n          if (res.message === undefined) {\r\n            const supers = this.props.types.filter(type =>\r\n              res.SuperIDs.includes(type._id)\r\n            );\r\n            this.setState({\r\n              Name: res.Name,\r\n              Description: res.Description,\r\n              _id: id,\r\n              Supers: supers,\r\n              Major: res.Major\r\n            });\r\n            this.props.updateSelectedType(res);\r\n          }\r\n          else {\r\n            this.setState({ message: res.message });\r\n          }\r\n        });\r\n      } else {\r\n        this.props.updateSelectedType({\r\n          _id: null,\r\n          Name: \"\",\r\n          Description: \"\",\r\n          Supers: [],\r\n          AttributesArr: [],\r\n          Major: false\r\n        });\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  handleUserInput = e => {\r\n    const name = e.target.name;\r\n    const value =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  inputBlur = e => {\r\n    const name = e.target.name;\r\n    const validation = this.validateField(name);\r\n    const fieldValidation = this.state.fieldValidation;\r\n    if (\r\n      fieldValidation[name] !== undefined &&\r\n      fieldValidation[name].valid !== validation.valid\r\n    ) {\r\n      fieldValidation[name].valid = validation.valid;\r\n      fieldValidation[name].message = validation.message;\r\n      this.setState({ fieldValidation: fieldValidation });\r\n    }\r\n  };\r\n\r\n  validateField = fieldName => {\r\n    let value = null;\r\n    let valid = true;\r\n    let message = \"\";\r\n    switch (fieldName) {\r\n      case \"Name\":\r\n        value = this.state[fieldName];\r\n        valid = value.match(/^[a-zA-Z0-9 ]*$/i) !== null;\r\n        if (!valid)\r\n          message = \"Only Letters, Numbers, and Spaces allowed in Type Names\";\r\n        else if (value.length < 2) {\r\n          valid = false;\r\n          message = \"Type Name is too short\";\r\n        } else {\r\n          valid =\r\n            this.props.types.filter(\r\n              t => t.Name === value && t._id !== this.state._id\r\n            ).length === 0;\r\n          if (!valid) message = \"This Type Name is already in use\";\r\n        }\r\n        break;\r\n      case \"AttributesArr\":\r\n        valid = true;\r\n        value = this.props.selectedType[fieldName];\r\n        message = \"\";\r\n        for (let i = 0; i < value.length; i++) {\r\n          if (value.filter(attr2 => attr2.Name === value[i].Name).length > 1) {\r\n            valid = false;\r\n            message = \"Attribute Names must be unique\";\r\n            break;\r\n          }\r\n          else if ((value[i].Type === \"Type\" || (value[i].Type === \"List\" && value[i].ListType === \"Type\")) && (value[i].Type2 === undefined || value[i].Type2 === null || value[i].Type2 === \"\")) {\r\n            valid = false;\r\n            message = `A Defined Type must be selected for ${value[i].Name}.`;\r\n            break;\r\n          }\r\n          else if ((value[i].Type === \"Options\" || (value[i].Type === \"List\" && value[i].ListType === \"Options\")) && (value[i].Options === undefined || value[i].Options === null || value[i].Options.length === 0)) {\r\n            valid = false;\r\n            message = `At least one Option must be set for ${value[i].Name}.`;\r\n            break;\r\n          }\r\n        } \r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const response = { valid: valid, message: message };\r\n    return response;\r\n  };\r\n\r\n  validateForm = respond => {\r\n    const nameValid = this.validateField(\"Name\");\r\n    const attrArrValid = this.validateField(\"AttributesArr\");\r\n    const formValid = nameValid.valid && attrArrValid.valid;\r\n    const fieldValidation = this.state.fieldValidation;\r\n    fieldValidation.Name = nameValid;\r\n    fieldValidation.AttributesArr = attrArrValid;\r\n    this.setState(\r\n      {\r\n        formValid: formValid,\r\n        fieldValidation: fieldValidation\r\n      },\r\n      respond\r\n    );\r\n  };\r\n\r\n  onSubmit = () => {\r\n    function respond() {\r\n      if (this.state.formValid) {\r\n        this.setState({ waiting: true }, this.submitThroughAPI);\r\n      }\r\n    }\r\n\r\n    this.validateForm(respond);\r\n  };\r\n\r\n  submitThroughAPI = () => {\r\n    const superIDs = this.state.Supers.map(s => {\r\n      return s._id;\r\n    });\r\n    const type = {\r\n      _id: this.state._id,\r\n      Name: this.state.Name,\r\n      Description: this.state.Description,\r\n      SuperIDs: superIDs,\r\n      AttributesArr: this.props.selectedType.AttributesArr,\r\n      WorldID: this.props.selectedWorld._id,\r\n      Major: this.state.Major,\r\n      ReferenceIDs: []\r\n    };\r\n    this.props.selectedType.AttributesArr.filter(a=>a.Type === \"Type\" || (a.Type === \"List\" && a.ListType === \"Type\")).forEach(a=>{\r\n      if (!type.ReferenceIDs.includes(a.Type2)) {\r\n        type.ReferenceIDs.push(a.Type2);\r\n      }\r\n    });\r\n\r\n    if (type._id === null) {\r\n      this.api\r\n        .createType(type)\r\n        .then(res => {\r\n          if (res.typeID !== undefined) {\r\n            type._id = res.typeID;\r\n            this.props.addType(type);\r\n            this.setState({\r\n              waiting: false,\r\n              redirectTo: `/world/details/${this.props.selectedWorld._id}`\r\n            });\r\n          }\r\n          else if (res.message !== undefined) {\r\n            this.setState({\r\n              waiting: false, \r\n              message: res.message \r\n            });\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    } else {\r\n      this.api\r\n        .updateType(type)\r\n        .then(res => {\r\n          if (res.message === `Type ${type.Name} updated!`) {\r\n            this.props.updateType(type);\r\n            this.setState({\r\n              waiting: false,\r\n              redirectTo: `/world/details/${this.props.selectedWorld._id}`\r\n            });\r\n          }\r\n          else {\r\n            this.setState({\r\n              waiting: false, \r\n              message: res.message \r\n            });\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n  };\r\n\r\n  supersChange = (e, value) => {\r\n    let supers = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n      const t = value[i];\r\n      supers.push(t);\r\n      supers = supers.concat(t.Supers);\r\n    }\r\n    this.setState({ Supers: supers });\r\n  };\r\n\r\n  addSuper = (selectedList, selectedItem) => {\r\n    selectedItem.Supers.forEach(s => {\r\n      if (selectedList.filter(s2 => s2._id === s._id).length === 0) selectedList.push(s);\r\n    });\r\n    const type = this.props.selectedType;\r\n    let attributes = [...type.AttributesArr];\r\n    for (let i = 0; i < selectedItem.AttributesArr.length; i++) {\r\n      const attribute = selectedItem.AttributesArr[i];\r\n      attribute.FromSupers.push(selectedItem._id);\r\n      const matches = attributes.filter(a => a.Name === attribute.Name);\r\n      if (matches.length === 0) {\r\n        // It's a new attribute.\r\n        attribute.index = attributes.length;\r\n        attributes.push(attribute);\r\n      } else {\r\n        // It's an existing attribute,\r\n        // so we just need to add the appropriate ids to FromSupers.\r\n        // TODO: I also need to make sure the type and details match.\r\n        const superIDs = [...matches[0].FromSupers];\r\n        for (let i = 0; i < attribute.FromSupers.length; i++) {\r\n          const superID = attribute.FromSupers[i];\r\n          if (!superIDs.includes(superID)) {\r\n            superIDs.push(superID);\r\n          }\r\n        }\r\n        matches[0].FromSupers = superIDs;\r\n      }\r\n    }\r\n    this.setState({ Supers: selectedList });\r\n    type.AttributesArr = attributes;\r\n    this.props.updateSelectedType(type);\r\n  }\r\n  \r\n  removeSuper = (selectedList, removedItem) => {\r\n    let supers = [];\r\n    let removeUs = [removedItem._id];\r\n    for (let i = 0; i < this.state.Supers.length; i++) {\r\n      const checkMe = this.props.types.filter(\r\n        t => t._id === this.state.Supers[i]._id\r\n      )[0];\r\n      if (checkMe._id === removedItem._id || checkMe.SuperIDs.includes(removedItem._id))\r\n        removeUs.push(checkMe._id);\r\n      else supers.push(checkMe);\r\n    }\r\n    const type = this.props.selectedType;\r\n    let attributes = [...type.AttributesArr];\r\n    for (let i = 0; i < attributes.length; i++) {\r\n      const attribute = attributes[i];\r\n      let j = 0;\r\n      while (j < attribute.FromSupers.length) {\r\n        const checkMe = attribute.FromSupers[j];\r\n        if (removeUs.includes(checkMe)) {\r\n          attribute.FromSupers.splice(j, 1);\r\n        } else {\r\n          j++;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ Supers: supers });\r\n    type.AttributesArr = attributes;\r\n    this.props.updateSelectedType(type);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirectTo !== null) {\r\n      return <Redirect to={this.state.redirectTo} />;\r\n    } else if (this.props.selectedWorld !== null && (this.props.user === null || this.props.selectedWorld.Owner !== this.props.user._id)) {\r\n      return <Redirect to=\"/\" />;\r\n    } else {\r\n      const types =\r\n        this.props.types === undefined || this.state._id === null\r\n          ? this.props.types\r\n          : this.props.types.filter(type => type._id !== this.state._id);\r\n      \r\n      return (\r\n        <Grid item xs={12} container spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <h2>{this.state._id === null ? \"Create New Type\" : \"Edit Type\"}</h2>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormControl variant=\"outlined\" fullWidth>\r\n              <InputLabel htmlFor=\"name\">Name</InputLabel>\r\n              <OutlinedInput\r\n                id=\"name\"\r\n                name=\"Name\"\r\n                type=\"text\"\r\n                autoComplete=\"Off\"\r\n                error={!this.state.fieldValidation.Name.valid}\r\n                value={this.state.Name}\r\n                onChange={this.handleUserInput}\r\n                onBlur={this.inputBlur}\r\n                labelWidth={43}\r\n                fullWidth\r\n              />\r\n              <FormHelperText>\r\n                {this.state.fieldValidation.Name.message}\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormControl variant=\"outlined\" fullWidth>\r\n              <InputLabel htmlFor=\"description\">Description</InputLabel>\r\n              <OutlinedInput\r\n                id=\"description\"\r\n                name=\"Description\"\r\n                type=\"text\"\r\n                value={this.state.Description}\r\n                onChange={this.handleUserInput}\r\n                onBlur={this.inputBlur}\r\n                labelWidth={82}\r\n                fullWidth\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={this.state.Major}\r\n                  onChange={this.handleUserInput}\r\n                  name=\"Major\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Major Type\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Multiselect\r\n              placeholder=\"Super Types\"\r\n              options={types}\r\n              selectedValues={this.state.Supers}\r\n              onSelect={this.addSuper}\r\n              onRemove={this.removeSuper}\r\n              displayValue=\"Name\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <AttributesControl />\r\n          </Grid>\r\n          <Grid item>\r\n            {/* <FormHelperText>\r\n              {this.state.fieldValidation.AttributesArr.message}\r\n            </FormHelperText> */}\r\n            {Object.keys(this.state.fieldValidation).map((fieldName, i) => {\r\n              if (\r\n                this.state.fieldValidation[fieldName] !== undefined &&\r\n                this.state.fieldValidation[fieldName].message.length > 0\r\n              ) {\r\n                return (\r\n                  <p className=\"redFont\" key={i}>\r\n                    {this.state.fieldValidation[fieldName].message}\r\n                  </p>\r\n                );\r\n              } else {\r\n                return \"\";\r\n              }\r\n            })}\r\n          </Grid>\r\n          <Grid item>\r\n            <div className=\"float-right\">\r\n              <Button\r\n                variant=\"contained\" color=\"primary\"\r\n                className=\"w-200\"\r\n                disabled={this.state.waiting}\r\n                onClick={this.onSubmit}\r\n                type=\"submit\"\r\n              >\r\n                {this.state.waiting ? \"Please Wait\" : \"Submit\"}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{marginLeft: \"4px\"}}\r\n                disabled={this.state.waiting}\r\n                onClick={_ => {\r\n                  if (this.props.selectedType._id === null) {\r\n                    this.setState({\r\n                      redirectTo: `/world/details/${this.props.selectedWorldID}`\r\n                    });\r\n                  }\r\n                  else {\r\n                    this.setState({\r\n                      redirectTo: `/type/details/${this.props.selectedType._id}`\r\n                    });\r\n                  }\r\n                }}\r\n                type=\"button\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Grid item>{this.state.message}</Grid>\r\n          {/* <Grid item>\r\n            {Object.keys(this.state.fieldValidation).map((fieldName, i) => {\r\n              if (\r\n                this.state.fieldValidation[fieldName] !== undefined &&\r\n                this.state.fieldValidation[fieldName].message.length > 0\r\n              ) {\r\n                return (\r\n                  <p className=\"redFont\" key={i}>\r\n                    {this.state.fieldValidation[fieldName].message}\r\n                  </p>\r\n                );\r\n              } else {\r\n                return \"\";\r\n              }\r\n            })}\r\n          </Grid> */}\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst TypeEditPage = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default TypeEditPage;\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectPage,\r\n  updateSelectedThing,\r\n  addThing,\r\n  updateThing,\r\n  setThings\r\n} from \"../../redux/actions/index\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport Delete from \"@material-ui/icons/Delete\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport API from \"../../api\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { Fab, Tooltip } from \"@material-ui/core\";\r\n\r\nconst mapStateToProps = state => {\r\n  const thing = state.app.selectedThing;\r\n  return {\r\n    selectedPage: state.app.selectedPage,\r\n    selectedThing: thing,\r\n    selectedWorld: state.app.selectedWorld,\r\n    selectedWorldID: state.app.selectedWorldID,\r\n    types: state.app.types,\r\n    things: state.app.things,\r\n    user: state.app.user\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page)),\r\n    updateSelectedThing: thing => dispatch(updateSelectedThing(thing)),\r\n    addThing: thing => dispatch(addThing(thing)),\r\n    updateThing: thing => dispatch(updateThing(thing)),\r\n    setThings: things => dispatch(setThings(things))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      _id: null,\r\n      Name: \"\",\r\n      Description: \"\",\r\n      Types: [],\r\n      Attributes: [],\r\n      fieldValidation: {\r\n        Name: { valid: true, message: \"\" },\r\n        AttributesArr: { valid: true, message: \"\" }\r\n      },\r\n      formValid: false,\r\n      message: \"\",\r\n      redirectTo: null,\r\n      modalOpen: false\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      const { id } = this.props.match.params;\r\n      if (id !== undefined) {\r\n        this.api.getThing(id).then(res => {\r\n          console.log(res);\r\n          if (res.message === undefined) {\r\n            let Types = [];\r\n            res.TypeIDs.forEach(tID=> {\r\n              Types = Types.concat(this.props.types.filter(t2=>t2._id === tID));\r\n            });\r\n            this.setState({\r\n              Name: res.Name,\r\n              Description: res.Description,\r\n              _id: id,\r\n              Types: Types\r\n            });\r\n            this.props.updateSelectedThing(res);\r\n          }\r\n          else {\r\n            console.log(res.message);\r\n          }\r\n        });\r\n      } else {\r\n        this.props.updateSelectedThing({\r\n          _id: null,\r\n          Name: \"\",\r\n          Description: \"\",\r\n          Types: [],\r\n          AttributesArr: []\r\n        });\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  getModalStyle = () => {\r\n    const top = Math.round(window.innerHeight / 2) - 50;\r\n    const left = Math.round(window.innerWidth / 2) - 200;\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(${left}px, ${top}px)`,\r\n    };\r\n  }\r\n\r\n  delete = e => {\r\n    this.api.deleteThing(this.state._id).then(res=>{\r\n      const things = this.props.things.filter(t=>t._id!==this.state._id);\r\n      this.props.setThings(things);\r\n      this.setState({redirectTo: `/world/details/${this.props.selectedWorldID}`})\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirectTo !== null) {\r\n      return <Redirect to={this.state.redirectTo} />;\r\n    } else if (this.props.selectedWorld !== null && !this.props.selectedWorld.Public && (this.props.user === null || this.props.selectedWorld.Owner !== this.props.user._id)) {\r\n      return <Redirect to=\"/\" />;\r\n    } else {\r\n      console.log(this.props.things);\r\n      const references = this.props.things.filter(t=>t.ReferenceIDs !== undefined && t.ReferenceIDs.includes(this.state._id));\r\n\r\n      return (\r\n        <Grid item xs={12} container spacing={0} direction=\"column\">\r\n          <Grid item container spacing={0} direction=\"row\">\r\n            <Grid item xs={9}>\r\n              <h2>{this.state.Name}</h2>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              { this.props.user !== null && this.props.selectedWorld !== null &&  this.props.selectedWorld.Owner === this.props.user._id ?\r\n              <List>\r\n                <ListItem>\r\n                  <Tooltip title={`Edit ${this.state.Name}`}>\r\n                    <Fab size=\"small\"\r\n                      color=\"primary\"\r\n                      href={`/thing/edit/${this.state._id}`}\r\n                    >\r\n                      <Edit />\r\n                    </Fab>\r\n                  </Tooltip>\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Tooltip title={`Delete ${this.state.Name}`}>\r\n                    <Fab size=\"small\"\r\n                      color=\"primary\"\r\n                      onClick={e => {this.setState({modalOpen: true})}}\r\n                    >\r\n                      <Delete />\r\n                    </Fab>\r\n                  </Tooltip>\r\n                </ListItem>\r\n              </List>\r\n              : \"\" }\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container spacing={0} direction=\"row\">\r\n            <Grid item sm={9} xs={12} container spacing={0} direction=\"column\">\r\n              <Grid item>{this.state.Description}</Grid>\r\n              <Grid item>\r\n                Attributes\r\n                <List>\r\n                  {this.props.selectedThing === null ||\r\n                  this.props.selectedThing === undefined\r\n                    ? \"\"\r\n                    : this.props.selectedThing.AttributesArr.map(\r\n                        (attribute, i) => {\r\n                          return (\r\n                            <ListItem key={i}>\r\n                              <ListItemText>\r\n                                {attribute.Name}:&nbsp;\r\n                                {attribute.Type === \"Type\" && attribute.Value !== \"\" ?\r\n                                <Button\r\n                                  variant=\"contained\"\r\n                                  color=\"primary\"\r\n                                  href={`/thing/details/${attribute.Value}`}\r\n                                >\r\n                                  <ListItemText primary={this.props.things.filter(t=>t._id === attribute.Value)[0].Name}/>\r\n                                </Button>\r\n                                : attribute.Type === \"List\" ?\r\n                                  attribute.ListValues.map(\r\n                                    (listValue, i) => {\r\n                                      return (\r\n                                      <span key={i}>\r\n                                        {\r\n                                          attribute.ListType === \"Type\" ?\r\n                                          <span>\r\n                                            <Button\r\n                                              variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                              href={`/thing/details/${listValue}`}\r\n                                            >\r\n                                              <ListItemText primary={this.props.things.filter(t=>t._id === listValue)[0].Name}/>\r\n                                            </Button> \r\n                                            &nbsp;\r\n                                          </span>\r\n                                          :\r\n                                          i > 0 ? `, ${listValue}` : `${listValue}`\r\n                                        }\r\n                                      </span>\r\n                                      );\r\n                                    })\r\n                                : attribute.Value}\r\n                              </ListItemText>\r\n                            </ListItem>\r\n                          );\r\n                        }\r\n                      )}\r\n                </List>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item sm={3} xs={12} container spacing={0} direction=\"column\">\r\n              {this.state.Types.length === 0 ? (\r\n                \"\"\r\n              ) : (\r\n                <Grid item>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary={\"Types\"} />\r\n                    </ListItem>\r\n                    {this.state.Types.map((type, i) => {\r\n                      return (\r\n                        <ListItem key={i}>\r\n                          <Button fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={`/type/details/${type._id}`}\r\n                          >\r\n                            <ListItemText primary={type.Name} />\r\n                          </Button>\r\n                        </ListItem>\r\n                      );\r\n                    })}\r\n                  </List>\r\n                </Grid>\r\n              )}\r\n              {references.length === 0 ? (\r\n                \"\"\r\n              ) : (\r\n                <Grid item>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary={\"Referenced in:\"} />\r\n                    </ListItem>\r\n                    {references.map((thing, i) => {\r\n                      return (\r\n                        <ListItem key={i}>\r\n                          <Button fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={`/thing/details/${thing._id}`}\r\n                          >\r\n                            <ListItemText primary={thing.Name} />\r\n                          </Button>\r\n                        </ListItem>\r\n                      );\r\n                    })}\r\n                  </List>\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Modal\r\n            aria-labelledby=\"delete-thing-modal\"\r\n            aria-describedby=\"delete-thing-modal-description\"\r\n            open={this.state.modalOpen}\r\n            onClose={e => {this.setState({modalOpen: false})}}\r\n          >\r\n            <div style={this.getModalStyle()} className=\"paper\">\r\n              <Grid container spacing={1} direction=\"column\">\r\n                <Grid item>\r\n                  Are you sure you want to delete {this.state.Name}?\r\n                </Grid>\r\n                <Grid item>\r\n                  (All references to it will be left alone and may not work correctly)\r\n                </Grid>\r\n                <Grid item container spacing={1} direction=\"row\">\r\n                  <Grid item xs={6}>\r\n                    <Button\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={this.delete}\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Button\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      onClick={e => {this.setState({modalOpen: false})}}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Modal>\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst ThingDetails = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default ThingDetails;\r\n","\r\n/* eslint-disable no-use-before-define */\r\nimport React, { useState } from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ChipInput from 'material-ui-chip-input';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\n\r\nconst handleTextListChange = (e, props) => {\r\n  const attr = props.attribute;\r\n  attr.ListValues = e;\r\n  props.onChange(attr);\r\n};\r\nconst handleType2Change = (e, props, respond) => {\r\n  // const attr = props.attribute;\r\n  // attr[\"Type2\"] = e.target.value;\r\n  if (e.target.value === \"new\") {\r\n    function respond2(newThing) {\r\n      // attr[\"Type2\"] = newType._id;\r\n      // props.onChange(attr);\r\n      respond(newThing._id);\r\n    }\r\n    props.onNewThing(respond2, props.types.filter(t=>t._id === props.attribute.Type2)[0]);\r\n  }\r\n  else {\r\n    // props.onChange(attr);\r\n    respond(e.target.value);\r\n  }\r\n};\r\nconst addOption = (selectedItem, props) => {\r\n  const attr = props.attribute;\r\n  attr.ListValues.push(selectedItem.Name);\r\n  props.onChange(attr);\r\n};\r\nconst removeOption = (selectedList, props) => {\r\n  const attr = props.attribute;\r\n  attr.ListValues = [];\r\n  selectedList.forEach(o => {\r\n    attr.ListValues.push(o.Name);\r\n  });\r\n  props.onChange(attr);\r\n};\r\nconst addType = (selectedItem, props) => {\r\n  if (selectedItem._id === \"new\") {\r\n    function respond2(newThing) {\r\n      const attr = props.attribute;\r\n      attr.ListValues.push(newThing._id);\r\n      props.onChange(attr);\r\n    }\r\n    props.onNewThing(respond2, props.types.filter(t=>t._id === props.attribute.Type2)[0]);\r\n  }\r\n  else {\r\n    const attr = props.attribute;\r\n    attr.ListValues.push(selectedItem._id);\r\n    props.onChange(attr);\r\n  }\r\n};\r\nconst removeType = (selectedList, props) => {\r\n  const attr = props.attribute;\r\n  attr.ListValues = [];\r\n  selectedList.forEach(o => {\r\n    attr.ListValues.push(o._id);\r\n  });\r\n  props.onChange(attr);\r\n};\r\n\r\nexport default function AttributeControl(props) {\r\n  const [value, changeValue] = useState(props.attribute.Value);\r\n  const type = props.attribute.Type === \"\" ? \"Text\" : props.attribute.Type;\r\n\r\n  const listOptions = [];\r\n  const listOptionValues = [];\r\n  if (type === \"List\" && props.attribute.ListType === \"Options\") {\r\n    props.attribute.Options.forEach(o => {\r\n      listOptions.push({Name: o});\r\n    });\r\n    props.attribute.ListValues.forEach(o => {\r\n      listOptionValues.push({Name: o});\r\n    });\r\n  }\r\n  else if (type === \"List\" && props.attribute.ListType === \"Type\") {\r\n    const type2 = props.types.filter(t=>t._id === props.attribute.Type2)[0];\r\n    listOptions.push({Name: `+ Create New ${type2.Name}`, _id: \"new\"});\r\n    props.things.filter(t=>t.TypeIDs.includes(props.attribute.Type2)).forEach(t => {\r\n      listOptions.push({Name: t.Name, _id: t._id});\r\n    });\r\n    listOptions.filter(t=>props.attribute.ListValues.includes(t._id)).forEach(t => {\r\n      listOptionValues.push(t);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid item>\r\n      { type === \"Text\" ?\r\n        <FormControl variant=\"outlined\"\r\n            fullWidth>\r\n          <InputLabel htmlFor=\"Name\">{ props.attribute.Name }</InputLabel>\r\n          <OutlinedInput\r\n            id=\"Name\"\r\n            name=\"Name\"\r\n            type=\"text\"\r\n            error={ props.error }\r\n            value={ value }\r\n            autoComplete=\"off\"\r\n            onChange={ e => { changeValue(e.target.value) } }\r\n            onBlur={ e => {\r\n                const attr = {\r\n                  index: props.attribute.index, \r\n                  Name: props.attribute.Name, \r\n                  Type: props.attribute.Type, \r\n                  Options: props.attribute.Options, \r\n                  Type2: props.attribute.Type2,\r\n                  ListType: props.attribute.ListType,\r\n                  FromTypes: props.attribute.FromTypes,\r\n                  Value: value,\r\n                  ListValues: props.attribute.ListValues\r\n                };\r\n                props.onChange(attr);\r\n              }\r\n            }\r\n            labelWidth={props.attribute.Name.length * 9}\r\n            fullWidth\r\n          />\r\n          <FormHelperText>{ props.message }</FormHelperText>\r\n        </FormControl>\r\n      : type === \"Number\" ?\r\n        <FormControl variant=\"outlined\"\r\n            fullWidth>\r\n          <InputLabel htmlFor=\"Name\">{ props.attribute.Name }</InputLabel>\r\n          <OutlinedInput\r\n            id=\"Name\"\r\n            name=\"Name\"\r\n            type=\"number\"\r\n            error={ props.error }\r\n            value={ value }\r\n            autoComplete=\"off\"\r\n            onChange={ e => { changeValue(e.target.value) } }\r\n            onBlur={ e => {\r\n                const attr = {\r\n                  index: props.attribute.index, \r\n                  Name: props.attribute.Name, \r\n                  Type: props.attribute.Type, \r\n                  Options: props.attribute.Options, \r\n                  Type2: props.attribute.Type2,\r\n                  ListType: props.attribute.ListType,\r\n                  FromTypes: props.attribute.FromTypes,\r\n                  Value: value,\r\n                  ListValues: props.attribute.ListValues\r\n                };\r\n                props.onChange(attr);\r\n              }\r\n            }\r\n            labelWidth={props.attribute.Name.length * 9}\r\n            fullWidth\r\n          />\r\n          <FormHelperText>{ props.message }</FormHelperText>\r\n        </FormControl>\r\n      : type === \"True/False\" ?\r\n        \"T/F\"\r\n      : type === \"Options\" ?\r\n        <FormControl variant=\"outlined\" fullWidth>\r\n          <InputLabel htmlFor=\"options-select\" id=\"options-select-label\">\r\n            {props.attribute.Name}\r\n          </InputLabel>\r\n          <Select\r\n            labelId=\"options-select-label\"\r\n            id=\"options-select\"\r\n            value={value}\r\n            onChange={ e => { changeValue(e.target.value) } }\r\n            onBlur={ e => {\r\n                const attr = {\r\n                  index: props.attribute.index, \r\n                  Name: props.attribute.Name, \r\n                  Type: props.attribute.Type, \r\n                  Options: props.attribute.Options, \r\n                  Type2: props.attribute.Type2,\r\n                  ListType: props.attribute.ListType,\r\n                  FromTypes: props.attribute.FromTypes,\r\n                  Value: value,\r\n                  ListValues: props.attribute.ListValues\r\n                };\r\n                props.onChange(attr);\r\n              }\r\n            }\r\n            fullWidth\r\n            labelWidth={props.attribute.Name.length * 9}\r\n          >\r\n            {props.attribute.Options.map((option, i) => {\r\n              return (<MenuItem key={i} value={option}>{option}</MenuItem>);\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n      : type === \"Type\" ?\r\n        <FormControl variant=\"outlined\" fullWidth>\r\n          <InputLabel htmlFor=\"type-select\" id=\"type-select-label\">\r\n            {props.attribute.Name}\r\n          </InputLabel>\r\n          <Select\r\n            labelId=\"type-select-label\"\r\n            id=\"type-select\"\r\n            value={value}\r\n            onChange={ e => { handleType2Change(e, props, changeValue) } }\r\n            onBlur={ e => {\r\n                const attr = {\r\n                  index: props.attribute.index, \r\n                  Name: props.attribute.Name, \r\n                  Type: props.attribute.Type, \r\n                  Options: props.attribute.Options, \r\n                  Type2: props.attribute.Type2,\r\n                  ListType: props.attribute.ListType,\r\n                  FromTypes: props.attribute.FromTypes,\r\n                  Value: value,\r\n                  ListValues: props.attribute.ListValues\r\n                };\r\n                props.onChange(attr);\r\n              }\r\n            }\r\n            fullWidth\r\n            labelWidth={props.attribute.Name.length * 9}\r\n          >\r\n            <MenuItem value=\"new\">+ Create New {props.types.filter(t=>t._id === props.attribute.Type2)[0].Name}</MenuItem>\r\n            {props.things.filter(t=>t.TypeIDs.includes(props.attribute.Type2)).map((thing, i) => {\r\n              return (<MenuItem key={i} value={thing._id}>{thing.Name}</MenuItem>);\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n      : type === \"List\" ?\r\n        <span> \r\n          { props.attribute.ListType === \"Text\" ?\r\n            <ChipInput\r\n              placeholder={props.attribute.Name}\r\n              variant=\"outlined\"\r\n              defaultValue={props.attribute.ListValues}\r\n              onChange={chips => handleTextListChange(chips, props)}\r\n            />\r\n          : props.attribute.ListType === \"Options\" ?\r\n            <Multiselect\r\n              placeholder={props.attribute.Name}\r\n              options={listOptions}\r\n              selectedValues={listOptionValues}\r\n              onSelect={(_, selectedItem) => {addOption(selectedItem, props)}}\r\n              onRemove={(selectedList, _) => {removeOption(selectedList, props)}}\r\n              displayValue=\"Name\"\r\n            />\r\n          : props.attribute.ListType === \"Type\" ?\r\n            <Multiselect\r\n              placeholder={props.attribute.Name}\r\n              options={listOptions}\r\n              selectedValues={listOptionValues}\r\n              onSelect={(_, selectedItem) => {addType(selectedItem, props)}}\r\n              onRemove={(selectedList, _) => {removeType(selectedList, props)}}\r\n              displayValue=\"Name\"\r\n            />\r\n          : \"\"\r\n          }\r\n        </span>\r\n      : \"\"\r\n      }\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { updateSelectedThing, addThing } from \"../../redux/actions/index\";\r\nimport AttributeControl from \"./AttributeControl\";\r\nimport API from \"../../api\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedThing: state.app.selectedThing,\r\n    things: state.app.things,\r\n    types: state.app.types,\r\n    selectedWorldID: state.app.selectedWorldID\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    updateSelectedThing: thing => dispatch(updateSelectedThing(thing)),\r\n    addThing: thing => dispatch(addThing(thing)),\r\n  };\r\n}\r\nclass Control extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalOpen: false,\r\n      Name: \"\",\r\n      fieldValidation: {\r\n        Name: { valid: true, message: \"\" }\r\n      },\r\n      formValid: false,\r\n      message: \"\",\r\n      waiting: false,\r\n      newThingType: null\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  newAttribute = () => {\r\n    const thing = this.props.selectedThing;\r\n    thing.AttributesArr.push({\r\n      index: thing.AttributesArr.length,\r\n      Name: \"\",\r\n      Type: \"Text\",\r\n      Options: [],\r\n      Type2: \"\",\r\n      ListType: \"\",\r\n      FromTypes: [],\r\n      Value: \"\",\r\n      ListValues: [],\r\n    });\r\n    this.props.updateSelectedThing(thing);\r\n  };\r\n\r\n  changeAttribute = value => {\r\n    const thing = this.props.selectedThing;\r\n    thing.AttributesArr[value.index] = {\r\n      index: value.index,\r\n      Name: value.Name,\r\n      Type: value.Type,\r\n      Options: value.Options,\r\n      Type2: value.Type2,\r\n      ListType: value.ListType,\r\n      FromTypes: value.FromTypes,\r\n      Value: value.Value,\r\n      ListValues: value.ListValues,\r\n    };\r\n    this.props.updateSelectedThing(thing);\r\n  };\r\n\r\n  blurAttribute = e => {\r\n  };\r\n\r\n  deleteAttribute = value => {\r\n    const thing = this.props.selectedThing;\r\n    thing.AttributesArr.splice(value.index);\r\n    this.props.updateSelectedThing(thing);\r\n  };\r\n\r\n  optionsChange = (e, props) => {\r\n  }\r\n\r\n  addNewThing = (respond, type) => {\r\n    // Opens a Modal where they enter a name.\r\n    this.setState({modalOpen: true, modalSubmit: respond, newThingType: type});\r\n  }\r\n  \r\n  getModalStyle = () => {\r\n    const top = Math.round(window.innerHeight / 2) - 50;\r\n    const left = Math.round(window.innerWidth / 2) - 200;\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(${left}px, ${top}px)`,\r\n    };\r\n  }\r\n\r\n  handleUserInput = e => {\r\n    const name = e.target.name;\r\n    const value =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  inputBlur = e => {\r\n    const name = e.target.name;\r\n    const validation = this.validateField(name);\r\n    const fieldValidation = this.state.fieldValidation;\r\n    if (\r\n      fieldValidation[name] !== undefined &&\r\n      fieldValidation[name].valid !== validation.valid\r\n    ) {\r\n      fieldValidation[name].valid = validation.valid;\r\n      fieldValidation[name].message = validation.message;\r\n      this.setState({ fieldValidation: fieldValidation });\r\n    }\r\n  };\r\n\r\n  validateField = fieldName => {\r\n    let value = null;\r\n    let valid = true;\r\n    let message = \"\";\r\n    switch (fieldName) {\r\n      case \"Name\":\r\n        value = this.state[fieldName];\r\n        valid = value.match(/^[a-zA-Z0-9 ]*$/i) !== null;\r\n        if (!valid)\r\n          message = \"Only Letters, Numbers, and Spaces allowed in Thing Names\";\r\n        else if (value.length < 2) {\r\n          valid = false;\r\n          message = \"Thing Name is too short\";\r\n        } else {\r\n          valid =\r\n            this.props.things.filter(\r\n              t => t.Name === value && t._id !== this.state._id\r\n            ).length === 0;\r\n          if (!valid) message = \"This Thing Name is already in use\";\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const response = { valid: valid, message: message };\r\n    return response;\r\n  };\r\n\r\n  validateForm = respond => {\r\n    const nameValid = this.validateField(\"Name\");\r\n    const formValid = nameValid.valid;\r\n    const fieldValidation = this.state.fieldValidation;\r\n    fieldValidation.Name = nameValid;\r\n    this.setState(\r\n      {\r\n        formValid: formValid,\r\n        fieldValidation: fieldValidation\r\n      },\r\n      respond\r\n    );\r\n  };\r\n\r\n  saveNewThing = () => {\r\n    function respond() {\r\n      if (this.state.formValid) {\r\n        this.setState({ waiting: true }, this.submitThroughAPI);\r\n      }\r\n    }\r\n\r\n    this.validateForm(respond);\r\n  };\r\n\r\n  submitThroughAPI = () => {\r\n    const types = this.props.types.filter(t=> t._id === this.state.newThingType._id || this.state.newThingType.SuperIDs.includes(t._id));\r\n    const typeIDs = types.map(s => {\r\n      return s._id;\r\n    });\r\n    const thing = {\r\n      _id: this.state._id,\r\n      Name: this.state.Name,\r\n      Description: \"\",\r\n      TypeIDs: typeIDs,\r\n      AttributesArr: [],\r\n      WorldID: this.props.selectedWorldID\r\n    };\r\n\r\n    // Calls API\r\n    this.api\r\n      .createThing(thing)\r\n      .then(res => {\r\n        if (res.thingID !== undefined) {\r\n          thing._id = res.thingID;\r\n          thing.Types = types;\r\n          // Adds to props \r\n          this.props.addThing(thing);\r\n          // Calls respond back to Attribute to set the thing\r\n          this.state.modalSubmit(thing);\r\n          this.setState({\r\n            waiting: false, \r\n            modalOpen: false\r\n          });\r\n        }\r\n        else if (res.message !== undefined) {\r\n          this.setState({\r\n            waiting: false, \r\n            message: res.message \r\n          });\r\n        }\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Grid item xs={12} container spacing={1} direction=\"column\">\r\n        <Grid item>Attributes</Grid>\r\n        {this.props.selectedThing === null || this.props.selectedThing === undefined ? \"\"\r\n          : this.props.selectedThing.AttributesArr.map((attribute, i) => {\r\n            return (\r\n              <AttributeControl\r\n                key={i}\r\n                thingID={this.props.selectedThing._id}\r\n                attribute={attribute}\r\n                onChange={this.changeAttribute}\r\n                onDelete={this.deleteAttribute}\r\n                onBlur={this.blurAttribute}\r\n                things={this.props.things}\r\n                types={this.props.types}\r\n                onNewThing={this.addNewThing}\r\n              />\r\n            );\r\n          })\r\n        }\r\n        <Modal\r\n          aria-labelledby=\"new-thing-modal\"\r\n          aria-describedby=\"new-thing-modal-description\"\r\n          open={this.state.modalOpen}\r\n          onClose={e => {this.setState({modalOpen: false})}}\r\n        >\r\n          <div style={this.getModalStyle()} className=\"paper\">\r\n            <Grid container spacing={1} direction=\"column\">\r\n              <Grid item>\r\n                Just give the new {this.state.newThingType === null ? \"\" : this.state.newThingType.Name} a name.\r\n              </Grid>\r\n              <Grid item>\r\n                (You can do the rest later.)\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel htmlFor=\"name\">Name</InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"name\"\r\n                    name=\"Name\"\r\n                    type=\"text\"\r\n                    autoComplete=\"Off\"\r\n                    error={!this.state.fieldValidation.Name.valid}\r\n                    value={this.state.Name}\r\n                    onChange={this.handleUserInput}\r\n                    onBlur={this.inputBlur}\r\n                    labelWidth={43}\r\n                    fullWidth\r\n                  />\r\n                  <FormHelperText>\r\n                    {this.state.fieldValidation.Name.message}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item container spacing={1} direction=\"row\">\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={this.state.waiting}\r\n                    onClick={this.saveNewThing}\r\n                  >\r\n                    {this.state.waiting ? \"Please Wait\" : \"Submit\"}\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    onClick={e => {this.setState({modalOpen: false})}}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Modal>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst AttributesControl = connect(mapStateToProps, mapDispatchToProps)(Control);\r\nexport default AttributesControl;\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectPage,\r\n  updateSelectedThing,\r\n  addThing,\r\n  updateThing\r\n} from \"../../redux/actions/index\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AttributesControl from \"./AttributesControl\";\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport API from \"../../api\";\r\n\r\n/* \r\n  This component will take the main portion of the page and is used for\r\n  creating or editing a Thing.  It will allow the use of Types to make\r\n  it faster.\r\n*/\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedPage: state.app.selectedPage,\r\n    selectedThing: state.app.selectedThing,\r\n    selectedWorld: state.app.selectedWorld,\r\n    selectedWorldID: state.app.selectedWorldID,\r\n    things: state.app.things,\r\n    types: state.app.types,\r\n    user: state.app.user\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    selectPage: page => dispatch(selectPage(page)),\r\n    updateSelectedThing: thing => dispatch(updateSelectedThing(thing)),\r\n    addThing: thing => dispatch(addThing(thing)),\r\n    updateThing: thing => dispatch(updateThing(thing))\r\n  };\r\n}\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      _id: null,\r\n      Name: \"\",\r\n      Description: \"\",\r\n      Types: [],\r\n      Attributes: [],\r\n      fieldValidation: {\r\n        Name: { valid: true, message: \"\" },\r\n        AttributesArr: { valid: true, message: \"\" }\r\n      },\r\n      formValid: false,\r\n      message: \"\",\r\n      redirectTo: null,\r\n      waiting: false\r\n    };\r\n    this.api = API.getInstance();\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      const { id } = this.props.match.params;\r\n      if (id !== undefined) {\r\n        if (id.includes(\"type_id_\")) {\r\n          // We're creating it from a type rather than from blank\r\n          const typeID = id.substring(8);\r\n          let type = this.props.types.filter(t=> t._id === typeID);\r\n          if (type.length > 0) {\r\n            type = type[0];\r\n            this.createThingFromType(type);\r\n          }\r\n          else {\r\n            this.setState({ message: \"Invalid Type\" });\r\n          }\r\n        }\r\n        else {\r\n          // We're editing an existing Thing\r\n          this.api.getThing(id).then(res => {\r\n            console.log(res);\r\n            const things = this.props.things.filter(\r\n              thing => res._id !== thing._id\r\n            );\r\n            let Types = [];\r\n            res.TypeIDs.forEach(tID=> {\r\n              Types = Types.concat(this.props.types.filter(t2=>t2._id === tID));\r\n            });\r\n            let attributes = [...res.AttributesArr];\r\n            Types.forEach(type=> {\r\n              for (let i = 0; i < type.AttributesArr.length; i++) {\r\n                const attribute = {...type.AttributesArr[i]};\r\n                attribute.FromTypes = [...attribute.FromSupers];\r\n                delete attribute.FromSupers;\r\n                attribute.FromTypes.push(type._id);\r\n                const matches = attributes.filter(a => a.Name === attribute.Name);\r\n                if (matches.length === 0) {\r\n                  // It's a new attribute.\r\n                  // Thing Attributes have Values, so we need to add that field.\r\n                  // In the future I'll have List Types, in which case this will be more complicated.\r\n                  // Also I'll be adding default values.\r\n                  attribute.Value = \"\";\r\n                  attribute.ListValues = [];\r\n                  attributes.push(attribute);\r\n                } else {\r\n                  // It's an existing attribute,\r\n                  // so we just need to add the appropriate ids to FromTypes.\r\n                  const typeIDs = [...matches[0].FromTypes];\r\n                  for (let i = 0; i < attribute.FromTypes.length; i++) {\r\n                    const typeID = attribute.FromTypes[i];\r\n                    if (!typeIDs.includes(typeID)) {\r\n                      typeIDs.push(typeID);\r\n                    }\r\n                  }\r\n                  matches[0].FromTypes = typeIDs;\r\n                }\r\n              }\r\n            });\r\n            res.AttributesArr = attributes;\r\n            this.setState({\r\n              Name: res.Name,\r\n              Description: res.Description,\r\n              _id: id,\r\n              Things: things,\r\n              Types: Types\r\n            });\r\n            this.props.updateSelectedThing(res);\r\n          });\r\n        }\r\n      } else {\r\n        // We're creating a new thing from blank.\r\n        this.props.updateSelectedThing({\r\n          _id: null,\r\n          Name: \"\",\r\n          Description: \"\",\r\n          Types: [],\r\n          AttributesArr: []\r\n        });\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  createThingFromType = type => {\r\n    let types = [];\r\n    types.push(type);\r\n    type.Supers.forEach(s=>{\r\n      if (types.filter(t=>t._id === s._id).length === 0) {\r\n        let superType = this.props.types.filter(t=>t._id === s._id);\r\n        if (superType.length > 0)\r\n          types.push(superType[0]);\r\n      }\r\n    });\r\n    const thing = {\r\n      _id: null,\r\n      Name: \"\",\r\n      Description: \"\",\r\n      Types: [],\r\n      AttributesArr: []\r\n    };\r\n    let attributes = [];\r\n    for (let i = 0; i < type.AttributesArr.length; i++) {\r\n      const attribute = {...type.AttributesArr[i]};\r\n      attribute.FromTypes = [...attribute.FromSupers];\r\n      delete attribute.FromSupers;\r\n      attribute.FromTypes.push(type._id);\r\n      const matches = attributes.filter(a => a.Name === attribute.Name);\r\n      if (matches.length === 0) {\r\n        // It's a new attribute.\r\n        // Thing Attributes have Values, so we need to add that field.\r\n        // In the future I'll have List Types, in which case this will be more complicated.\r\n        // Also I'll be adding default values.\r\n        attribute.Value = \"\";\r\n        attribute.ListValues = [];\r\n        attributes.push(attribute);\r\n      } else {\r\n        // It's an existing attribute,\r\n        // so we just need to add the appropriate ids to FromTypes.\r\n        const typeIDs = [...matches[0].FromTypes];\r\n        for (let i = 0; i < attribute.FromTypes.length; i++) {\r\n          const typeID = attribute.FromTypes[i];\r\n          if (!typeIDs.includes(typeID)) {\r\n            typeIDs.push(typeID);\r\n          }\r\n        }\r\n        matches[0].FromTypes = typeIDs;\r\n      }\r\n    }\r\n    this.setState({ Types: types });\r\n    thing.AttributesArr = attributes;\r\n    this.props.updateSelectedThing(thing);\r\n  };\r\n\r\n  handleUserInput = e => {\r\n    const name = e.target.name;\r\n    const value =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  inputBlur = e => {\r\n    const name = e.target.name;\r\n    const validation = this.validateField(name);\r\n    const fieldValidation = this.state.fieldValidation;\r\n    if (\r\n      fieldValidation[name] !== undefined &&\r\n      fieldValidation[name].valid !== validation.valid\r\n    ) {\r\n      fieldValidation[name].valid = validation.valid;\r\n      fieldValidation[name].message = validation.message;\r\n      this.setState({ fieldValidation: fieldValidation });\r\n    }\r\n  };\r\n\r\n  validateField = fieldName => {\r\n    let value = null;\r\n    let valid = true;\r\n    let message = \"\";\r\n    switch (fieldName) {\r\n      case \"Name\":\r\n        value = this.state[fieldName];\r\n        valid = value.match(/^[a-zA-Z0-9 ]*$/i) !== null;\r\n        if (!valid)\r\n          message = \"Only Letters, Numbers, and Spaces allowed in Thing Names\";\r\n        else if (value.length < 2) {\r\n          valid = false;\r\n          message = \"Thing Name is too short\";\r\n        } else {\r\n          valid =\r\n            this.props.things.filter(\r\n              t => t.Name === value && t._id !== this.state._id\r\n            ).length === 0;\r\n          if (!valid) message = \"This Thing Name is already in use\";\r\n        }\r\n        break;\r\n      case \"AttributesArr\":\r\n        valid = true;\r\n        value = this.props.selectedThing[fieldName];\r\n        for (let i = 0; i < value.length; i++) {\r\n          if (value.filter(attr2 => attr2.Name === value[i].Name).length > 1) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        message = valid ? \"\" : \"Attribute Names must be unique\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const response = { valid: valid, message: message };\r\n    return response;\r\n  };\r\n\r\n  validateForm = respond => {\r\n    const nameValid = this.validateField(\"Name\");\r\n    const attrArrValid = this.validateField(\"AttributesArr\");\r\n    const formValid = nameValid.valid && attrArrValid.valid;\r\n    const fieldValidation = this.state.fieldValidation;\r\n    fieldValidation.Name = nameValid;\r\n    fieldValidation.AttributesArr = attrArrValid;\r\n    this.setState(\r\n      {\r\n        formValid: formValid,\r\n        fieldValidation: fieldValidation\r\n      },\r\n      respond\r\n    );\r\n  };\r\n\r\n  onSubmit = () => {\r\n    function respond() {\r\n      if (this.state.formValid) {\r\n        this.setState({ waiting: true }, this.submitThroughAPI);\r\n      }\r\n    }\r\n\r\n    this.validateForm(respond);\r\n  };\r\n\r\n  submitThroughAPI = () => {\r\n    const typeIDs = this.state.Types.map(s => {\r\n      return s._id;\r\n    });\r\n    const thing = {\r\n      _id: this.state._id,\r\n      Name: this.state.Name,\r\n      Description: this.state.Description,\r\n      TypeIDs: typeIDs,\r\n      AttributesArr: this.props.selectedThing.AttributesArr,\r\n      WorldID: this.props.selectedWorld._id,\r\n      ReferenceIDs: []\r\n    };\r\n    this.props.selectedThing.AttributesArr.filter(a=>a.Type === \"Type\").forEach(a=>{\r\n      if (!thing.ReferenceIDs.includes(a.Value)) {\r\n        thing.ReferenceIDs.push(a.Type2);\r\n      }\r\n    });\r\n    this.props.selectedThing.AttributesArr.filter(a=>a.Type === \"List\" && a.ListType === \"Type\").forEach(a=>{\r\n      a.ListValues.forEach(v=> {\r\n        if (!thing.ReferenceIDs.includes(v)) {\r\n          thing.ReferenceIDs.push(v);\r\n        }\r\n      });\r\n    });\r\n\r\n    if (thing._id === null) {\r\n      this.api\r\n        .createThing(thing)\r\n        .then(res => {\r\n          thing._id = res.thingID;\r\n          thing.Types = this.state.Types;\r\n          this.props.addThing(thing);\r\n          this.setState({\r\n            waiting: false,\r\n            redirectTo: `/world/details/${this.props.selectedWorld._id}`\r\n          });\r\n        })\r\n        .catch(err => console.log(err));\r\n    } else {\r\n      this.api\r\n        .updateThing(thing)\r\n        .then(res => {\r\n          thing.Types = this.state.Types;\r\n          this.props.updateThing(thing);\r\n          this.setState({\r\n            waiting: false,\r\n            redirectTo: `/world/details/${this.props.selectedWorld._id}`\r\n          });\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n  };\r\n\r\n  typesChange = (e, value) => {\r\n    let types = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n      const t = value[i];\r\n      types.push(t);\r\n      types = types.concat(t.Types);\r\n    }\r\n    this.setState({ Types: types });\r\n  };\r\n\r\n  addType = (selectedList, selectedItem) => {\r\n    selectedItem.Supers.forEach(s=>{\r\n      if (selectedList.filter(t=>t._id === s._id).length === 0) {\r\n        let superType = this.props.types.filter(t=>t._id === s._id);\r\n        if (superType.length > 0)\r\n        selectedList.push(superType[0]);\r\n      }\r\n    });\r\n    const thing = this.props.selectedThing;\r\n    let attributes = [...thing.AttributesArr];\r\n    for (let i = 0; i < selectedItem.AttributesArr.length; i++) {\r\n      const attribute = selectedItem.AttributesArr[i];\r\n      if (attribute.FromTypes === undefined)\r\n        attribute.FromTypes = [];\r\n      attribute.FromTypes.push(selectedItem._id);\r\n      const matches = attributes.filter(a => a.Name === attribute.Name);\r\n      if (matches.length === 0) {\r\n        // It's a new attribute.\r\n        // Thing Attributes have Values, so we need to add that field.\r\n        // In the future I'll have List Types, in which case this will be more complicated.\r\n        // Also I'll be adding default values.\r\n        attribute.Value = \"\";\r\n        attribute.ListValues = [];\r\n        attributes.push(attribute);\r\n      } else {\r\n        // It's an existing attribute,\r\n        // so we just need to add the appropriate ids to FromTypes.\r\n        const typeIDs = [...matches[0].FromTypes];\r\n        for (let i = 0; i < attribute.FromTypes.length; i++) {\r\n          const typeID = attribute.FromTypes[i];\r\n          if (!typeIDs.includes(typeID)) {\r\n            typeIDs.push(typeID);\r\n          }\r\n        }\r\n        matches[0].FromTypes = typeIDs;\r\n      }\r\n    }\r\n    this.setState({ Types: selectedList });\r\n    thing.AttributesArr = attributes;\r\n    this.props.updateSelectedThing(thing);\r\n  }\r\n  \r\n  removeType = (selectedList, removedItem) => {\r\n    // TODO: Add a confirmation before doing this\r\n    // to let them know it will also remove sub-types.\r\n    let types = [];\r\n    let removeUs = [];\r\n    this.state.Types.forEach(checkMe => {\r\n      if (checkMe._id === removedItem._id || checkMe.SuperIDs.includes(removedItem._id))\r\n        removeUs.push(checkMe._id);\r\n      else types.push(checkMe);\r\n    });\r\n    const thing = this.props.selectedThing;\r\n    let attributes = [...thing.AttributesArr];\r\n    for (let i = 0; i < attributes.length; i++) {\r\n      const attribute = attributes[i];\r\n      if (attribute.FromTypes === undefined) {\r\n        // TODO: Remove this once all attributes have been changed to include the field\r\n        attribute.FromTypes = [];\r\n      }\r\n      let j = 0;\r\n      while (j < attribute.FromTypes.length) {\r\n        const checkMe = attribute.FromTypes[j];\r\n        if (removeUs.includes(checkMe)) {\r\n          attribute.FromTypes.splice(j, 1);\r\n        } else {\r\n          j++;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ Types: types });\r\n    thing.AttributesArr = attributes;\r\n    this.props.updateSelectedThing(thing);\r\n  }\r\n\r\n  renderHeader() {\r\n    let typeStr = \"Thing\";\r\n    this.state.Types.forEach(t=>{\r\n      if (t.Major) { \r\n        if (typeStr === \"Thing\") {\r\n          typeStr = t.Name;\r\n        }\r\n        else {\r\n          typeStr += \"/\" + t.Name;\r\n        }\r\n      }\r\n    });\r\n    return <h2>{this.state._id === null ? `Create New ${typeStr}` : `Edit ${typeStr}`}</h2>;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirectTo !== null) {\r\n      return <Redirect to={this.state.redirectTo} />;\r\n    } else if (this.props.user === null || (this.props.selectedWorld !== null && this.props.selectedWorld.Owner !== this.props.user._id)) {\r\n      return <Redirect to=\"/\" />;\r\n    } else {\r\n      return (\r\n        <Grid item xs={12} container spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            {this.renderHeader()}\r\n          </Grid>\r\n          <Grid item>\r\n            <FormControl variant=\"outlined\" fullWidth>\r\n              <InputLabel htmlFor=\"name\">Name</InputLabel>\r\n              <OutlinedInput\r\n                id=\"name\"\r\n                name=\"Name\"\r\n                type=\"text\"\r\n                autoComplete=\"Off\"\r\n                error={!this.state.fieldValidation.Name.valid}\r\n                value={this.state.Name}\r\n                onChange={this.handleUserInput}\r\n                onBlur={this.inputBlur}\r\n                labelWidth={43}\r\n                fullWidth\r\n              />\r\n              <FormHelperText>\r\n                {this.state.fieldValidation.Name.message}\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormControl variant=\"outlined\" fullWidth>\r\n              <InputLabel htmlFor=\"description\">Description</InputLabel>\r\n              <OutlinedInput\r\n                id=\"description\"\r\n                name=\"Description\"\r\n                type=\"text\"\r\n                value={this.state.Description}\r\n                onChange={this.handleUserInput}\r\n                onBlur={this.inputBlur}\r\n                labelWidth={82}\r\n                fullWidth\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            <Multiselect\r\n              placeholder=\"Types\"\r\n              options={this.props.types}\r\n              selectedValues={this.state.Types}\r\n              onSelect={this.addType}\r\n              onRemove={this.removeType}\r\n              displayValue=\"Name\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <AttributesControl />\r\n            <FormHelperText>\r\n              {this.state.fieldValidation.AttributesArr.message}\r\n            </FormHelperText>\r\n          </Grid>\r\n          <Grid item>\r\n            <div className=\"float-right\">\r\n              <Button\r\n                variant=\"contained\" color=\"primary\"\r\n                className=\"w200\"\r\n                disabled={this.state.waiting}\r\n                onClick={this.onSubmit}\r\n                type=\"submit\"\r\n              >\r\n                {this.state.waiting ? \"Please Wait\" : \"Submit\"}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{marginLeft: \"4px\"}}\r\n                disabled={this.state.waiting}\r\n                onClick={_ => {\r\n                  if (this.props.selectedThing._id === null) {\r\n                    this.setState({\r\n                      redirectTo: `/world/details/${this.props.selectedWorldID}`\r\n                    });\r\n                  }\r\n                  else {\r\n                    this.setState({\r\n                      redirectTo: `/thing/details/${this.props.selectedThing._id}`\r\n                    });\r\n                  }\r\n                }}\r\n                type=\"button\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Grid item>{this.state.message}</Grid>\r\n          <Grid item>\r\n            {Object.keys(this.state.fieldValidation).map((fieldName, i) => {\r\n              if (\r\n                this.state.fieldValidation[fieldName] !== undefined &&\r\n                this.state.fieldValidation[fieldName].message.length > 0\r\n              ) {\r\n                return (\r\n                  <p className=\"redFont\" key={i}>\r\n                    {this.state.fieldValidation[fieldName].message}\r\n                  </p>\r\n                );\r\n              } else {\r\n                return \"\";\r\n              }\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst ThingEditPage = connect(mapStateToProps, mapDispatchToProps)(Page);\r\nexport default ThingEditPage;\r\n","import React, { Component } from \"react\";\r\nimport { \r\n  Route, \r\n  Switch } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport HomePage from \"./Home\";\r\nimport ForumMenuPage from \"./Forum/ForumMenu\";\r\nimport LoginPage from \"./User/Login\";\r\nimport UserEditPage from \"./User/Edit\";\r\nimport WorldDetailsPage from \"./World/Details\";\r\nimport WorldEditPage from \"./World/Edit\";\r\n// import WorldDeletePage from \"./World/Delete\";\r\nimport TypeDetailsPage from \"./Type/Details\";\r\nimport TypeEditPage from \"./Type/Edit\";\r\n// import TypeDeletePage from \"./Type/Delete\";\r\nimport ThingDetailsPage from \"./Thing/Details\";\r\nimport ThingEditPage from \"./Thing/Edit\";\r\n// import ThingDeletePage from \"./Thing/Delete\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      version: \"0\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid item xs={12} className=\"h-100 margined\">\r\n        <Switch>\r\n          {/* <Route exact path=\"/Template\" component={TemplatePage} /> */}\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route exact path=\"/home\" component={HomePage} />\r\n          <Route exact path=\"/User/Login\" component={LoginPage} />\r\n          <Route exact path=\"/profile\" component={UserEditPage} />\r\n          \r\n          {/* <Route exact path=\"/test/:testtext\" component={Test} /> */}\r\n          <Route exact path=\"/forums\" component={ForumMenuPage} />\r\n          <Route exact path=\"/world/details/:id\" component={WorldDetailsPage} />\r\n          <Route exact path=\"/world/create\" component={WorldEditPage} />\r\n          <Route exact path=\"/world/edit/:id\" component={WorldEditPage} />\r\n          {/* <Route exact path=\"/world/delete/:id\" component={WorldDeletePage} /> */}\r\n          <Route exact path=\"/type/create\" component={TypeEditPage} />\r\n          <Route exact path=\"/type/details/:id\" component={TypeDetailsPage} />\r\n          <Route exact path=\"/type/edit/:id\" component={TypeEditPage} />\r\n          {/* <Route exact path=\"/type/delete/:id\" component={TypeDeletePage} /> */}\r\n          <Route exact path=\"/thing/create\" component={ThingEditPage} />\r\n          <Route exact path=\"/thing/create/:id\" component={ThingEditPage} />\r\n          <Route exact path=\"/thing/details/:id\" component={ThingDetailsPage} />\r\n          <Route exact path=\"/thing/edit/:id\" component={ThingEditPage} />\r\n          {/* <Route exact path=\"/thing/delete/:id\" component={ThingDeletePage} /> */}\r\n        </Switch>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst MainPage = connect()(Page);\r\nexport default MainPage;\r\n","// // App.js\n// //\n// import React, { Component } from 'react';\n// import './App.css';\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       flower: {}\n//     }\n//     this.getFlower();\n//   }\n//   getFlower() {\n//     fetch('/flower')\n//       .then(response => response.json())\n//       .then(data => {\n//         this.setState({\n//           flower: data\n//         });\n//       });\n//   }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h1>{this.state.flower.name}</h1>\n//         <p>{this.state.flower.colour}</p>\n//       </div>\n//     );\n//   }\n// }\n// export default App;\n\nimport React, { Component } from \"react\";\nimport \"./assets/css/material-dashboard-react.css\";\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport NavBar from \"./components/Navigation/Navbar\";\nimport Sidebar from \"./components/Navigation/Sidebar\";\nimport MainPage from \"./views/MainPage\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\n\nconst mapStateToProps = state => {\n  return {\n    menuOpen: state.app.menuOpen\n  };\n};\nclass AppLayout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      version: \"0\",\n      width: 0,\n      marginLeft: 220\n    };\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  updateDimensions() {\n    let w = window.innerWidth;\n    if (w >= 600) {\n      w -= 200;\n      this.setState({ width: w, marginLeft: 220, innerWidth: window.innerWidth });\n    }\n    else {\n      this.setState({ width: w, marginLeft: 0, innerWidth: window.innerWidth });\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        {this.props.menuOpen ? \n          <Box display={{ xs: 'none', sm: 'inline' }} className=\"Sidebar\">\n            <Sidebar className=\"\" logoText={\"Author's Notebook\"} />\n          </Box>\n        : \"\" }\n        <Grid container>\n          <Grid item xs={12}\n            style={{ \n              marginLeft: `${this.props.menuOpen ? this.state.marginLeft : 0}px`, \n              width: `${this.props.menuOpen ? this.state.width : this.state.innerWidth}px` \n            }}>\n            <NavBar />\n          </Grid>\n          <Grid item xs={12}\n            style={{ \n              marginLeft: `${this.props.menuOpen ? this.state.marginLeft + 10 : 10}px`, \n              width: `${this.props.menuOpen ? this.state.width - 20 : this.state.innerWidth - 20}px`,\n              marginRight: \"10px\",\n              marginTop: \"10px\" \n            }}>\n            <MainPage />\n          </Grid>\n        </Grid>\n      </Router>\n    );\n  }\n}\n\nconst App = connect(mapStateToProps)(AppLayout);\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  SELECT_PAGE,\r\n  ADD_ARTICLE,\r\n  LOGIN,\r\n  LOG_OUT,\r\n  SET_WORLDS,\r\n  SET_PUBLIC_WORLDS,\r\n  ADD_WORLD,\r\n  UPDATE_WORLD,\r\n  SELECT_WORLD,\r\n  SET_TYPES,\r\n  ADD_TYPE,\r\n  SET_THINGS,\r\n  ADD_THING,\r\n  UPDATE_TYPE,\r\n  UPDATE_ATTRIBUTES_ARR,\r\n  UPDATE_SELECTED_TYPE,\r\n  UPDATE_THING,\r\n  UPDATE_SELECTED_THING,\r\n  LOAD_FROM_STORAGE,\r\n  TOGGLE_MENU\r\n} from \"../constants/actionTypes\";\r\n\r\nconst initialState = {\r\n  selectedPage: \"Test\",\r\n  articles: [],\r\n  user: null,\r\n  loginError: \"\",\r\n  worlds: [],\r\n  publicWorlds: [],\r\n  selectedWorld: null,\r\n  selectedWorldID: null,\r\n  types: [],\r\n  things: [],\r\n  selectedType: null,\r\n  attributesArr: [],\r\n  selectedThing: null,\r\n  loadIt: true,\r\n  menuOpen: true\r\n};\r\nfunction rootReducer(state = initialState, action) {\r\n  if (action.type === LOAD_FROM_STORAGE) {\r\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\r\n    const worlds = JSON.parse(sessionStorage.getItem(\"worlds\"));\r\n    const publicWorlds = JSON.parse(sessionStorage.getItem(\"publicWorlds\"));\r\n    const selectedWorld = JSON.parse(sessionStorage.getItem(\"selectedWorld\"));\r\n    const selectedWorldID = sessionStorage.getItem(\"selectedWorldID\");\r\n    const types = JSON.parse(sessionStorage.getItem(\"types\"));\r\n    const things = JSON.parse(sessionStorage.getItem(\"things\"));\r\n    \r\n    return Object.assign({}, state, {\r\n      user: user,\r\n      worlds: worlds === null ? [] : worlds,\r\n      publicWorlds: publicWorlds === null ? [] : publicWorlds,\r\n      selectedWorld,\r\n      selectedWorldID,\r\n      types: types === null ? [] : types,\r\n      things: things === null ? [] : things\r\n    });\r\n  } else if (action.type === SELECT_PAGE) {\r\n    return Object.assign({}, state, {\r\n      selectedPage: action.payload\r\n    });\r\n  } else if (action.type === ADD_ARTICLE) {\r\n    return Object.assign({}, state, {\r\n      articles: state.articles.concat(action.payload)\r\n    });\r\n  } else if (action.type === LOGIN) {\r\n    sessionStorage.setItem(\"user\", JSON.stringify(action.payload));\r\n    return Object.assign({}, state, {\r\n      user: action.payload\r\n    });\r\n  } else if (action.type === LOG_OUT) {\r\n    sessionStorage.removeItem(\"user\");\r\n    return Object.assign({}, state, {\r\n      user: null\r\n    });\r\n  } else if (action.type === SET_WORLDS) {\r\n    if (action.payload.message === undefined){\r\n      sessionStorage.setItem(\"worlds\", JSON.stringify(action.payload));\r\n      if (state.selectedWorldID !== null && state.selectedWorld === null) {\r\n        const worldArr = action.payload.filter(\r\n          world => world._id === state.selectedWorldID\r\n        );\r\n        if (worldArr.length > 0) {\r\n          let world = worldArr[0];\r\n          sessionStorage.setItem(\"selectedWorld\", JSON.stringify(world));\r\n          return Object.assign({}, state, {\r\n            worlds: action.payload,\r\n            selectedWorld: world\r\n          });\r\n        } else {\r\n          return Object.assign({}, state, {\r\n            worlds: action.payload\r\n          });\r\n        }\r\n      } else {\r\n        return Object.assign({}, state, {\r\n          worlds: action.payload\r\n        });\r\n      }\r\n    }\r\n    else {\r\n      return Object.assign({}, state, {});\r\n    }\r\n  } else if (action.type === SET_PUBLIC_WORLDS) {\r\n    if (action.payload.message === undefined){\r\n      sessionStorage.setItem(\"publicWorlds\", JSON.stringify(action.payload));\r\n      if (state.selectedWorldID !== null && state.selectedWorld === null) {\r\n        const worldArr = action.payload.filter(\r\n          world => world._id === state.selectedWorldID\r\n        );\r\n        if (worldArr.length > 0) {\r\n          let world = worldArr[0];\r\n          sessionStorage.setItem(\"selectedWorld\", JSON.stringify(world));\r\n          return Object.assign({}, state, {\r\n            publicWorlds: action.payload,\r\n            selectedWorld: world\r\n          });\r\n        } else {\r\n          return Object.assign({}, state, {\r\n            publicWorlds: action.payload\r\n          });\r\n        }\r\n      } else {\r\n        return Object.assign({}, state, {\r\n          publicWorlds: action.payload\r\n        });\r\n      }\r\n    }\r\n    else {\r\n      return Object.assign({}, state, {});\r\n    }\r\n  } else if (action.type === ADD_WORLD) {\r\n    if (action.payload.Public) {\r\n      const worlds = state.worlds.concat(action.payload);\r\n      const publicWorlds = state.publicWorlds.concat(action.payload);\r\n      sessionStorage.setItem(\"worlds\", JSON.stringify(worlds));\r\n      sessionStorage.setItem(\"publicWorlds\", JSON.stringify(publicWorlds));\r\n      return Object.assign({}, state, {\r\n        worlds,\r\n        publicWorlds\r\n      });\r\n    } else {\r\n      const worlds = state.worlds.concat(action.payload);\r\n      sessionStorage.setItem(\"worlds\", JSON.stringify(worlds));\r\n      return Object.assign({}, state, {\r\n        worlds: state.worlds.concat(action.payload)\r\n      });\r\n    }\r\n  } else if (action.type === UPDATE_WORLD) {\r\n    const worlds = [...state.worlds];\r\n    let publicWorlds = [...state.publicWorlds];\r\n    const world = worlds.filter(t => t._id === action.payload._id)[0];\r\n    world.Name = action.payload.Name;\r\n    const wasPublic = world.Public;\r\n    world.Public = action.payload.Public;\r\n    sessionStorage.setItem(\"worlds\", JSON.stringify(worlds));\r\n    if (world.Public) {\r\n      if (wasPublic) {\r\n        // It was already public so we just need to update the name\r\n        const publicWorld = publicWorlds.filter(t => t._id === world._id)[0];\r\n        publicWorld.Name = world.Name;\r\n      }\r\n      else {\r\n        // It's been changed to public, so we need to add it\r\n        publicWorlds = publicWorlds.concat(world);\r\n      }\r\n      sessionStorage.setItem(\"publicWorlds\", JSON.stringify(publicWorlds));\r\n      return Object.assign({}, state, {\r\n        worlds,\r\n        publicWorlds\r\n      });\r\n    } else {\r\n      if (wasPublic) {\r\n        // It used to be public, so we need to remove it\r\n        publicWorlds = publicWorlds.filter(t => t._id !== world._id);\r\n        sessionStorage.setItem(\"publicWorlds\", JSON.stringify(publicWorlds));\r\n        return Object.assign({}, state, {\r\n          worlds,\r\n          publicWorlds\r\n        });\r\n      }\r\n      else {\r\n        // It's still not public, so we can leave it\r\n        return Object.assign({}, state, {\r\n          worlds\r\n        });\r\n      }\r\n    }\r\n  } else if (action.type === SELECT_WORLD) {\r\n    let world = state.worlds.filter(world => world._id === action.payload);\r\n    if (world.length === 0)\r\n      world = state.publicWorlds.filter(world => world._id === action.payload);\r\n    if (world.length > 0) {\r\n      sessionStorage.setItem(\"selectedWorldID\", action.payload);\r\n      sessionStorage.setItem(\"selectedWorld\", JSON.stringify(world[0]));\r\n      return Object.assign({}, state, {\r\n        selectedWorldID: action.payload,\r\n        selectedWorld: world[0]\r\n      });\r\n    } else {\r\n      sessionStorage.setItem(\"selectedWorldID\", action.payload);\r\n      sessionStorage.removeItem(\"selectedWorld\");\r\n      return Object.assign({}, state, {\r\n        selectedWorldID: action.payload,\r\n        selectedWorld: null\r\n      });\r\n    }\r\n  } else if (action.type === SET_TYPES) {\r\n    sessionStorage.setItem(\"types\", JSON.stringify(action.payload));\r\n    return Object.assign({}, state, {\r\n      types: action.payload\r\n    });\r\n  } else if (action.type === ADD_TYPE) {\r\n    const types = state.types.concat(action.payload);\r\n    sessionStorage.setItem(\"types\", JSON.stringify(types));\r\n    return Object.assign({}, state, {\r\n      types: types\r\n    });\r\n  } else if (action.type === SET_THINGS) {\r\n    sessionStorage.setItem(\"things\", JSON.stringify(action.payload));\r\n    return Object.assign({}, state, {\r\n      things: action.payload\r\n    });\r\n  } else if (action.type === ADD_THING) {\r\n    const things = state.things.concat(action.payload);\r\n    sessionStorage.setItem(\"things\", JSON.stringify(things));\r\n    return Object.assign({}, state, {\r\n      things: things\r\n    });\r\n  } else if (action.type === UPDATE_SELECTED_TYPE) {\r\n    // This is because Redux won't cause a rerender\r\n    // on changes to arrays.\r\n    const changedType = { ...action.payload, changedAt: Date.now() };\r\n    return Object.assign({}, state, {\r\n      selectedType: changedType\r\n    });\r\n  } else if (action.type === UPDATE_TYPE) {\r\n    const types = [...state.types];\r\n    const type = types.filter(t => t._id === action.payload._id)[0];\r\n    type.Name = action.payload.Name;\r\n    type.Description = action.payload.Description;\r\n    type.Supers = action.payload.Supers;\r\n    type.Attributes = action.payload.Attributes;\r\n    sessionStorage.setItem(\"types\", JSON.stringify(types));\r\n    return Object.assign({}, state, {\r\n      types: types\r\n    });\r\n  } else if (action.type === UPDATE_ATTRIBUTES_ARR) {\r\n    return Object.assign({}, state, {\r\n      attributesArr: action.payload\r\n    });\r\n  } else if (action.type === UPDATE_SELECTED_THING) {\r\n    // This is because Redux won't cause a rerender\r\n    // on changes to arrays.\r\n    const changedThing = { ...action.payload, changedAt: Date.now() };\r\n    return Object.assign({}, state, {\r\n      selectedThing: changedThing\r\n    });\r\n  } else if (action.type === UPDATE_THING) {\r\n    const things = [...state.things];\r\n    const thing = things.filter(t => t._id === action.payload._id)[0];\r\n    thing.Name = action.payload.Name;\r\n    thing.Description = action.payload.Description;\r\n    thing.Types = action.payload.Types;\r\n    thing.Attributes = action.payload.Attributes;\r\n    sessionStorage.setItem(\"things\", JSON.stringify(things));\r\n    return Object.assign({}, state, {\r\n      things: things\r\n    });\r\n  } else if (action.type === TOGGLE_MENU) {\r\n    return Object.assign({}, state, {\r\n      menuOpen: !state.menuOpen\r\n    });\r\n  }\r\n  return state;\r\n}\r\n\r\nexport default rootReducer;\r\n\r\nexport const login = (user, history) => {};\r\n\r\nexport const logout = history => {};\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { sessionService, sessionReducer } from \"redux-react-session\";\r\nimport rootReducer from \"../reducers/index\";\r\nconst reducers = {\r\n  app: rootReducer,\r\n  session: sessionReducer\r\n};\r\n\r\nconst reducer = combineReducers(reducers);\r\nconst store = createStore(reducer);\r\nconst validateSession = session => {\r\n  // check if your session is still valid\r\n  return true;\r\n};\r\nconst options = {\r\n  refreshFromLocalStorage: true,\r\n  refreshOnCheckAuth: true,\r\n  redirectPath: \"/home\",\r\n  driver: \"COOKIES\",\r\n  validateSession\r\n};\r\n\r\nsessionService\r\n  .initSessionService(store, options)\r\n  .then(() =>\r\n    console.log(\r\n      \"Redux React Session is ready and a session was refreshed from your storage\"\r\n    )\r\n  )\r\n  .catch(() =>\r\n    console.log(\r\n      \"Redux React Session is ready and there is no session in your storage\"\r\n    )\r\n  );\r\nexport default store;\r\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}